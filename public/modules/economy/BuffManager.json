{
  "name": "BuffManager",
  "author": "limon",
  "supportedGames": ["7 Days to Die"],
  "versions": [
    {
      "tag": "latest",
      "description": "# Dynamic Buff Manager\n\nFlexible buff management system that supports unlimited buff packages with role requirements, expiration tracking, and currency costs.\n\n## Features\n- ✅ Unlimited buff packages (add as many as you need)\n- ✅ Role-based access control per package\n- ✅ Time-based expiration system\n- ✅ Auto-apply buffs on player connect\n- ✅ Currency costs and cooldowns per package\n- ✅ Automatic maintenance to keep buffs active\n\n## Quick Start\n\n1. **Add a Buff Package**\n   - Click \"Add Item\" under Buff Packages\n   - Set Command Name (e.g., \"vipbuff\")\n   - Set Display Name (e.g., \"VIP Speed Package\")\n   - Add buff names from your XML (e.g., \"SpeedbuffVip\")\n\n2. **Get Role ID**\n   - Go to Settings → Roles in Takaro\n   - Click on the role you want (e.g., \"VIP\")\n   - Look at the browser address bar: `https://your-takaro.com/settings/roles/743b9623-ad09-4cf2-86c0-3d7faed57a88`\n   - Copy the UUID from the URL (the part after `/roles/`)\n   - Example: `743b9623-ad09-4cf2-86c0-3d7faed57a88`\n   - Paste into \"Required Role ID\" field\n   - Leave empty to allow everyone\n\n3. **Configure Duration**\n   - Set how long buffs should last in minutes\n   - 0 = never expires (maintenance keeps them active forever)\n   - 60 = expires after 1 hour\n\n4. **Save and Install**\n\n## Configuration Fields\n\n### Buff Package Settings\n\n- **Command Name**: What players type (creates /getbuff commandName)\n- **Display Name**: Friendly name in messages\n- **Description**: Explanation of what the package does\n- **Buff Names**: Array of buff codes from your buffs.xml\n- **Required Role ID**: UUID of the role (copy from browser URL). Empty = everyone\n- **Duration (Minutes)**: Expiration time. 0 = never expires\n- **Auto-Apply on Connect**: Give buff automatically when player joins\n- **Currency Cost**: Price to use the command\n- **Cooldown (Seconds)**: Per-player cooldown\n\n### Examples\n\n**VIP Package:**\n- Command: \"vipbuff\"\n- Buffs: [\"SpeedbuffVip\", \"ExpBuffVip\"]\n- Role: 743b9623-ad09-4cf2-86c0-3d7faed57a88\n- Duration: 0 (permanent)\n- Auto-apply: Yes\n- Cost: 0\n- Cooldown: 0\n\n**Temporary Donor Buff:**\n- Command: \"donorbuff\"\n- Buffs: [\"SuperSpeed\", \"SuperJump\"]\n- Role: abc-123-donor-role-id\n- Duration: 120 (2 hours)\n- Auto-apply: No\n- Cost: 1000\n- Cooldown: 3600 (1 hour)\n\n## How It Works\n\n1. **On Player Connect**: Module checks all packages with auto-apply enabled and matching roles\n2. **Manual Command**: Player uses /getbuff <packageName> to activate a specific package\n3. **Expiration Tracking**: Module stores expiration timestamp per player per package\n4. **Maintenance**: Cronjob re-applies non-expired buffs every 15 minutes\n\n## Troubleshooting\n\n**Buffs not applying:**\n- Check buff names match your buffs.xml exactly (case-sensitive)\n- Verify role ID is correct UUID from browser URL\n- Check player actually has the role assigned\n- Look at module execution events for detailed logs\n\n**Buffs disappearing:**\n- Check duration - may be expiring\n- Verify maintenance cronjob is enabled\n- Check game server console for buff command errors\n\n**Currency not deducting:**\n- Verify economy is enabled in Takaro settings\n- Check currency cost is set correctly per package",
      "configSchema": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"type\":\"object\",\"properties\":{\"buffPackages\":{\"type\":\"array\",\"title\":\"Buff Packages\",\"description\":\"Define unlimited buff packages. Each package can have its own role requirements, duration, and cost.\",\"items\":{\"type\":\"object\",\"properties\":{\"commandName\":{\"type\":\"string\",\"title\":\"Command Name\",\"description\":\"The command trigger (e.g., 'vipbuff' for /getbuff vipbuff)\",\"minLength\":1},\"displayName\":{\"type\":\"string\",\"title\":\"Display Name\",\"description\":\"Friendly name shown to players\",\"minLength\":1},\"description\":{\"type\":\"string\",\"title\":\"Description\",\"description\":\"What this buff package does\",\"default\":\"\"},\"buffNames\":{\"type\":\"array\",\"title\":\"Buff Names\",\"description\":\"List of buff names from your server's XML (e.g., SpeedbuffVip, ExpBuffVip)\",\"items\":{\"type\":\"string\"},\"minItems\":1},\"requiredRoleId\":{\"type\":\"string\",\"title\":\"Required Role ID\",\"description\":\"Copy the role UUID from browser URL: https://takaro.io/settings/roles/743b9623-ad09-4cf2-86c0-3d7faed57a88 → Paste: 743b9623-ad09-4cf2-86c0-3d7faed57a88. Leave empty to allow all players.\",\"default\":\"\"},\"duration\":{\"type\":\"number\",\"title\":\"Duration (Minutes)\",\"description\":\"How long before the buff expires and stops being re-applied. Set to 0 for permanent (never expires)\",\"minimum\":0,\"default\":60},\"autoApplyOnConnect\":{\"type\":\"boolean\",\"title\":\"Auto-Apply on Connect\",\"description\":\"Automatically give this buff when eligible players connect\",\"default\":true},\"currencyCost\":{\"type\":\"number\",\"title\":\"Currency Cost\",\"description\":\"How much currency players must pay to use this command\",\"minimum\":0,\"default\":0}},\"required\":[\"commandName\",\"displayName\",\"buffNames\"]}},\"maintenanceEnabled\":{\"type\":\"boolean\",\"title\":\"Enable Maintenance Cronjob\",\"description\":\"Periodically re-apply active (non-expired) buffs to keep them running\",\"default\":true},\"maintenanceInterval\":{\"type\":\"string\",\"title\":\"Maintenance Schedule\",\"description\":\"Cron expression for maintenance frequency (default: every 15 minutes)\",\"default\":\"*/15 * * * *\"}},\"required\":[\"buffPackages\"]}",
      "uiSchema": "{\"buffPackages\":{\"items\":{\"duration\":{\"ui:widget\":\"duration\"}}}}",
      "commands": [
        {
          "function": "import { data, takaro, TakaroUserError } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, pog, arguments: args, module, player } = data;\n\n    console.log(`⚡ /buffplayer command executed by ${player?.name || pog.gameId}`);\n\n    const config = module.userConfig;\n    const buffPackages = config.buffPackages || [];\n\n    if (buffPackages.length === 0) {\n        console.log('❌ No buff packages configured');\n        throw new TakaroUserError('No buff packages are configured.');\n    }\n\n    const targetPlayerName = args.playerName?.trim() || '';\n    const packageName = args.packageName?.trim() || '';\n\n    if (!targetPlayerName) {\n        console.log('❌ No player name provided');\n        throw new TakaroUserError('Please specify a player name.');\n    }\n\n    if (!packageName) {\n        console.log('❌ No package name provided');\n        throw new TakaroUserError('Please specify a buff package name or \"all\".');\n    }\n\n    const playersRes = await takaro.gameserver.gameServerControllerGetPlayers(gameServerId);\n    const onlinePlayers = playersRes.data.data || [];\n\n    console.log(`   Found ${onlinePlayers.length} online player(s)`);\n\n    const targetOnlinePlayer = onlinePlayers.find(p =>\n        p.name.toLowerCase().includes(targetPlayerName.toLowerCase())\n    );\n\n    if (!targetOnlinePlayer) {\n        console.log(`❌ Player \"${targetPlayerName}\" not found or not online`);\n        throw new TakaroUserError(`Player \"${targetPlayerName}\" not found or not online.`);\n    }\n\n    console.log(`👤 Target player: ${targetOnlinePlayer.name}`);\n\n    const targetPlayerRes = await takaro.player.playerControllerSearch({\n        filters: {\n            steamId: [targetOnlinePlayer.steamId]\n        },\n        limit: 1\n    });\n\n    if (!targetPlayerRes.data.data || targetPlayerRes.data.data.length === 0) {\n        console.log(`❌ Player not found in Takaro database`);\n        throw new TakaroUserError(`Player not found in Takaro database.`);\n    }\n\n    const targetPlayer = targetPlayerRes.data.data[0];\n    console.log(`   Target player ID: ${targetPlayer.id}`);\n\n    // Check if user wants to apply ALL packages\n    if (packageName.toLowerCase() === 'all') {\n        console.log(`💉 Applying ALL buff packages (${buffPackages.length} packages)`);\n\n        let totalBuffsApplied = 0;\n        let packagesProcessed = 0;\n\n        for (const pkg of buffPackages) {\n            console.log(`\\n📦 Processing package: ${pkg.displayName}`);\n\n            const buffNames = pkg.buffNames || [];\n            console.log(`   Contains ${buffNames.length} buff(s): ${buffNames.join(', ')}`);\n\n            const buffCommands = buffNames.map(buffName =>\n                takaro.gameserver.gameServerControllerExecuteCommand(gameServerId, {\n                    command: `buffplayer \"${targetOnlinePlayer.name}\" ${buffName}`\n                })\n                    .then((response) => {\n                        const serverResponse = response.data.data?.rawResult || 'No response';\n                        console.log(`   ✓ Applied ${buffName}`);\n                        console.log(`      Server response: ${serverResponse}`);\n                        return { success: true, buff: buffName };\n                    })\n                    .catch(err => {\n                        console.error(`   ❌ Failed to apply ${buffName}:`, err.message);\n                        return { success: false, buff: buffName };\n                    })\n            );\n\n            const results = await Promise.all(buffCommands);\n            const successCount = results.filter(r => r && r.success).length;\n            totalBuffsApplied += successCount;\n            packagesProcessed++;\n\n            console.log(`   ✅ Applied ${successCount}/${buffNames.length} buffs from this package`);\n\n            if (pkg.duration > 0) {\n                const expiryKey = `buff_expiry_${pkg.commandName}`;\n                const expiryTime = Date.now() + pkg.duration;  // ✅ duration is already in milliseconds\n\n                try {\n                    const existingVars = await takaro.variable.variableControllerSearch({\n                        filters: {\n                            key: [expiryKey],\n                            playerId: [targetPlayer.id],\n                            gameServerId: [gameServerId],\n                            moduleId: [module.moduleId]\n                        }\n                    });\n\n                    const minutes = Math.floor(pkg.duration / 60000);\n                    const hours = Math.floor(minutes / 60);\n                    const timeStr = hours > 0 ? `${hours}h ${minutes % 60}m` : `${minutes}m`;\n\n                    if (existingVars.data.data.length > 0) {\n                        await takaro.variable.variableControllerUpdate(existingVars.data.data[0].id, {\n                            value: expiryTime.toString()\n                        });\n                        console.log(`   ⏰ Expiration updated for ${pkg.commandName}: ${timeStr}`);\n                    } else {\n                        await takaro.variable.variableControllerCreate({\n                            key: expiryKey,\n                            value: expiryTime.toString(),\n                            playerId: targetPlayer.id,\n                            gameServerId: gameServerId,\n                            moduleId: module.moduleId\n                        });\n                        console.log(`   ⏰ Expiration set for ${pkg.commandName}: ${timeStr}`);\n                    }\n                } catch (err) {\n                    console.error(`   ⚠️ Failed to set expiration variable for ${pkg.commandName}:`, err.message);\n                }\n            } else {\n                console.log(`   ⏰ No expiration for ${pkg.commandName} (permanent)`);\n            }\n        }\n\n        console.log(`\\n✅ Complete: Applied ${totalBuffsApplied} total buffs across ${packagesProcessed} packages`);\n        await pog.pm(`Applied ALL buff packages to ${targetOnlinePlayer.name}! (${totalBuffsApplied} buffs applied)`);\n        return;\n    }\n\n    // Apply specific package\n    const pkg = buffPackages.find(p => p.commandName.toLowerCase() === packageName.toLowerCase());\n\n    if (!pkg) {\n        console.log(`❌ Package \"${packageName}\" not found`);\n        const availablePackages = buffPackages.map(p => p.commandName).join(', ');\n        throw new TakaroUserError(`Buff package \"${packageName}\" not found. Available: ${availablePackages}. Use \"all\" to apply all packages.`);\n    }\n\n    console.log(`🎯 Found package: ${pkg.displayName}`);\n\n    const buffNames = pkg.buffNames || [];\n    console.log(`💉 Applying ${buffNames.length} buff(s): ${buffNames.join(', ')}`);\n\n    const buffCommands = buffNames.map(buffName =>\n        takaro.gameserver.gameServerControllerExecuteCommand(gameServerId, {\n            command: `buffplayer \"${targetOnlinePlayer.name}\" ${buffName}`\n        })\n            .then((response) => {\n                const serverResponse = response.data.data?.rawResult || 'No response';\n                console.log(`   ✓ Applied ${buffName}`);\n                console.log(`      Server response: ${serverResponse}`);\n                return { success: true, buff: buffName };\n            })\n            .catch(err => {\n                console.error(`   ❌ Failed to apply ${buffName}:`, err.message);\n                return { success: false, buff: buffName };\n            })\n    );\n\n    const results = await Promise.all(buffCommands);\n    const successCount = results.filter(r => r && r.success).length;\n\n    console.log(`✅ Applied ${successCount}/${buffNames.length} buffs successfully`);\n\n    if (pkg.duration > 0) {\n        const expiryKey = `buff_expiry_${pkg.commandName}`;\n        const expiryTime = Date.now() + pkg.duration;  // ✅ duration is already in milliseconds\n\n        try {\n            const existingVars = await takaro.variable.variableControllerSearch({\n                filters: {\n                    key: [expiryKey],\n                    playerId: [targetPlayer.id],\n                    gameServerId: [gameServerId],\n                    moduleId: [module.moduleId]\n                }\n            });\n\n            const minutes = Math.floor(pkg.duration / 60000);\n            const hours = Math.floor(minutes / 60);\n            const timeStr = hours > 0 ? `${hours}h ${minutes % 60}m` : `${minutes}m`;\n\n            if (existingVars.data.data.length > 0) {\n                await takaro.variable.variableControllerUpdate(existingVars.data.data[0].id, {\n                    value: expiryTime.toString()\n                });\n                console.log(`⏰ Expiration updated: ${timeStr}`);\n            } else {\n                await takaro.variable.variableControllerCreate({\n                    key: expiryKey,\n                    value: expiryTime.toString(),\n                    playerId: targetPlayer.id,\n                    gameServerId: gameServerId,\n                    moduleId: module.moduleId\n                });\n                console.log(`⏰ Expiration set: ${timeStr}`);\n            }\n        } catch (err) {\n            console.error(`⚠️ Failed to set expiration variable:`, err.message);\n        }\n    } else {\n        console.log(`⏰ No expiration (permanent buff)`);\n    }\n\n    // Format expiry message\n    let expiryMsg = '';\n    if (pkg.duration > 0) {\n        const minutes = Math.floor(pkg.duration / 60000);\n        const hours = Math.floor(minutes / 60);\n        expiryMsg = hours > 0\n            ? ` (expires in ${hours}h ${minutes % 60}m)`\n            : ` (expires in ${minutes}m)`;\n    }\n\n    await pog.pm(`Applied ${pkg.displayName} to ${targetOnlinePlayer.name}!${expiryMsg}`);\n    console.log('✅ Command complete');\n}\n\nawait main();",
          "name": "buffplayer",
          "description": null,
          "trigger": "buffplayer",
          "helpText": "Admin command to apply a buff package to any player",
          "arguments": [
            {
              "name": "playerName",
              "type": "string",
              "helpText": "Name of the player to buff",
              "position": 0
            },
            {
              "name": "packageName",
              "type": "string",
              "helpText": "Name of the buff package to apply",
              "position": 1
            }
          ]
        },
        {
          "function": "import { data, takaro, TakaroUserError } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, pog, arguments: args, module, player } = data;\n\n    console.log(`⚡ /debuffplayer command executed by ${player?.name || pog.gameId}`);\n\n    const config = module.userConfig;\n    const buffPackages = config.buffPackages || [];\n\n    if (buffPackages.length === 0) {\n        console.log('❌ No buff packages configured');\n        throw new TakaroUserError('No buff packages are configured.');\n    }\n\n    const targetPlayerName = args.playerName?.trim() || '';\n    const packageName = args.packageName?.trim() || '';\n\n    if (!targetPlayerName) {\n        console.log('❌ No player name provided');\n        throw new TakaroUserError('Please specify a player name.');\n    }\n\n    if (!packageName) {\n        console.log('❌ No package name provided');\n        throw new TakaroUserError('Please specify a buff package name or \"all\".');\n    }\n\n    const playersRes = await takaro.gameserver.gameServerControllerGetPlayers(gameServerId);\n    const onlinePlayers = playersRes.data.data || [];\n\n    console.log(`   Found ${onlinePlayers.length} online player(s)`);\n\n    const targetOnlinePlayer = onlinePlayers.find(p =>\n        p.name.toLowerCase().includes(targetPlayerName.toLowerCase())\n    );\n\n    if (!targetOnlinePlayer) {\n        console.log(`❌ Player \"${targetPlayerName}\" not found or not online`);\n        throw new TakaroUserError(`Player \"${targetPlayerName}\" not found or not online.`);\n    }\n\n    console.log(`👤 Target player: ${targetOnlinePlayer.name}`);\n\n    const targetPlayerRes = await takaro.player.playerControllerSearch({\n        filters: {\n            steamId: [targetOnlinePlayer.steamId]\n        },\n        limit: 1\n    });\n\n    if (!targetPlayerRes.data.data || targetPlayerRes.data.data.length === 0) {\n        console.log(`❌ Player not found in Takaro database`);\n        throw new TakaroUserError(`Player not found in Takaro database.`);\n    }\n\n    const targetPlayer = targetPlayerRes.data.data[0];\n    console.log(`   Target player ID: ${targetPlayer.id}`);\n\n    // Check if user wants to remove ALL packages\n    if (packageName.toLowerCase() === 'all') {\n        console.log(`💊 Removing ALL buff packages (${buffPackages.length} packages)`);\n\n        let totalBuffsRemoved = 0;\n        let packagesProcessed = 0;\n\n        for (const pkg of buffPackages) {\n            console.log(`\\n📦 Processing package: ${pkg.displayName}`);\n\n            const buffNames = pkg.buffNames || [];\n            console.log(`   Contains ${buffNames.length} buff(s): ${buffNames.join(', ')}`);\n\n            const debuffCommands = buffNames.map(buffName =>\n                takaro.gameserver.gameServerControllerExecuteCommand(gameServerId, {\n                    command: `debuffplayer \"${targetOnlinePlayer.name}\" ${buffName}`\n                })\n                    .then((response) => {\n                        const serverResponse = response.data.data?.rawResult || 'No response';\n                        console.log(`   ✓ Removed ${buffName}`);\n                        console.log(`      Server response: ${serverResponse}`);\n                        return { success: true, buff: buffName };\n                    })\n                    .catch(err => {\n                        console.error(`   ❌ Failed to remove ${buffName}:`, err.message);\n                        return { success: false, buff: buffName };\n                    })\n            );\n\n            const results = await Promise.all(debuffCommands);\n            const successCount = results.filter(r => r && r.success).length;\n            totalBuffsRemoved += successCount;\n            packagesProcessed++;\n\n            console.log(`   ✅ Removed ${successCount}/${buffNames.length} buffs from this package`);\n\n            const expiryKey = `buff_expiry_${pkg.commandName}`;\n\n            try {\n                const existingVars = await takaro.variable.variableControllerSearch({\n                    filters: {\n                        key: [expiryKey],\n                        playerId: [targetPlayer.id],\n                        gameServerId: [gameServerId],\n                        moduleId: [module.moduleId]\n                    }\n                });\n\n                if (existingVars.data.data.length > 0) {\n                    await takaro.variable.variableControllerDelete(existingVars.data.data[0].id);\n                    console.log(`   ⏰ Expiration variable deleted for ${pkg.commandName}`);\n                } else {\n                    console.log(`   ⏰ No expiration variable found for ${pkg.commandName}`);\n                }\n            } catch (err) {\n                console.error(`   ⚠️ Failed to delete expiration variable for ${pkg.commandName}:`, err.message);\n            }\n        }\n\n        console.log(`\\n✅ Complete: Removed ${totalBuffsRemoved} total buffs across ${packagesProcessed} packages`);\n        await pog.pm(`Removed ALL buff packages from ${targetOnlinePlayer.name}! (${totalBuffsRemoved} buffs removed)`);\n        return;\n    }\n\n    // Remove specific package\n    const pkg = buffPackages.find(p => p.commandName.toLowerCase() === packageName.toLowerCase());\n\n    if (!pkg) {\n        console.log(`❌ Package \"${packageName}\" not found`);\n        const availablePackages = buffPackages.map(p => p.commandName).join(', ');\n        throw new TakaroUserError(`Buff package \"${packageName}\" not found. Available: ${availablePackages}. Use \"all\" to remove all packages.`);\n    }\n\n    console.log(`🎯 Found package: ${pkg.displayName}`);\n\n    const buffNames = pkg.buffNames || [];\n    console.log(`💊 Removing ${buffNames.length} buff(s): ${buffNames.join(', ')}`);\n\n    const debuffCommands = buffNames.map(buffName =>\n        takaro.gameserver.gameServerControllerExecuteCommand(gameServerId, {\n            command: `debuffplayer \"${targetOnlinePlayer.name}\" ${buffName}`\n        })\n            .then((response) => {\n                const serverResponse = response.data.data?.rawResult || 'No response';\n                console.log(`   ✓ Removed ${buffName}`);\n                console.log(`      Server response: ${serverResponse}`);\n                return { success: true, buff: buffName };\n            })\n            .catch(err => {\n                console.error(`   ❌ Failed to remove ${buffName}:`, err.message);\n                return { success: false, buff: buffName };\n            })\n    );\n\n    const results = await Promise.all(debuffCommands);\n    const successCount = results.filter(r => r && r.success).length;\n\n    console.log(`✅ Removed ${successCount}/${buffNames.length} buffs successfully`);\n\n    const expiryKey = `buff_expiry_${pkg.commandName}`;\n\n    try {\n        const existingVars = await takaro.variable.variableControllerSearch({\n            filters: {\n                key: [expiryKey],\n                playerId: [targetPlayer.id],\n                gameServerId: [gameServerId],\n                moduleId: [module.moduleId]\n            }\n        });\n\n        if (existingVars.data.data.length > 0) {\n            await takaro.variable.variableControllerDelete(existingVars.data.data[0].id);\n            console.log(`⏰ Expiration variable deleted`);\n        } else {\n            console.log(`⏰ No expiration variable found to delete`);\n        }\n    } catch (err) {\n        console.error(`⚠️ Failed to delete expiration variable:`, err.message);\n    }\n\n    await pog.pm(`Removed ${pkg.displayName} from ${targetOnlinePlayer.name}!`);\n    console.log('✅ Command complete');\n}\n\nawait main();",
          "name": "debuffplayer",
          "description": "debuff your player",
          "trigger": "debuffplayer",
          "helpText": "Remove buff tracking from a player. If packageName is not specified, removes all buffs. Usage: /debuffplayer <playerName> [packageName]",
          "arguments": [
            {
              "name": "playerName",
              "type": "string",
              "helpText": "Name of the player to debuff",
              "position": 0
            },
            {
              "name": "packageName",
              "type": "string",
              "defaultValue": "",
              "helpText": "The buff package name to remove",
              "position": 1
            }
          ]
        },
        {
          "function": "import { data, takaro, checkPermission, TakaroUserError } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, pog, arguments: args, module, player } = data;\n\n    console.log(`⚡ /getbuff command executed by ${player?.name || pog.gameId}`);\n\n    const config = module.userConfig;\n    const buffPackages = config.buffPackages || [];\n\n    if (buffPackages.length === 0) {\n        console.log('❌ No buff packages configured');\n        throw new TakaroUserError('No buff packages are configured. Please contact an administrator.');\n    }\n\n    const packageName = args.packageName?.trim() || '';\n\n    // If no package specified, list available packages\n    if (!packageName) {\n        console.log('📋 Listing available buff packages');\n        const availablePackages = buffPackages\n            .map(pkg => {\n                const cost = pkg.currencyCost > 0 ? ` (Cost: ${pkg.currencyCost})` : '';\n                const role = pkg.requiredRoleId && pkg.requiredRoleId.trim() ? ' [Role Required]' : '';\n\n                // Convert duration from milliseconds to readable format\n                let durationText = '';\n                if (pkg.duration > 0) {\n                    const minutes = Math.floor(pkg.duration / 60000);\n                    const hours = Math.floor(minutes / 60);\n                    if (hours > 0) {\n                        durationText = ` [Duration: ${hours}h ${minutes % 60}m]`;\n                    } else {\n                        durationText = ` [Duration: ${minutes}m]`;\n                    }\n                } else {\n                    durationText = ' [Permanent]';\n                }\n\n                return `• ${pkg.commandName} - ${pkg.displayName}${cost}${role}${durationText}${pkg.description ? '\\n  ' + pkg.description : ''}`;\n            })\n            .join('\\n');\n\n        await pog.pm(`Available buff packages:\\n${availablePackages}\\n\\nUsage: getbuff <packageName>`);\n        console.log('✅ Package list sent');\n        return;\n    }\n\n    // Find the requested package\n    const pkg = buffPackages.find(p => p.commandName.toLowerCase() === packageName.toLowerCase());\n\n    if (!pkg) {\n        console.log(`❌ Package \"${packageName}\" not found`);\n        throw new TakaroUserError(`Buff package \"${packageName}\" not found. Use /getbuff to see available packages.`);\n    }\n\n    console.log(`🎯 Found package: ${pkg.displayName}`);\n\n    // Check role requirement\n    if (pkg.requiredRoleId && pkg.requiredRoleId.trim() !== '') {\n        const playerRoles = pog.roles || [];\n        const hasRole = playerRoles.some(r => r.role.id === pkg.requiredRoleId);\n\n        console.log(`🔐 Role check: ${hasRole ? '✓ HAS' : '✗ NO'} required role ${pkg.requiredRoleId}`);\n\n        if (!hasRole) {\n            console.log('❌ Command denied - insufficient role');\n            throw new TakaroUserError(`You don't have the required role to use this buff package.`);\n        }\n    } else {\n        console.log('🔐 Role check: ✓ No role required');\n    }\n\n    // Handle currency cost\n    if (pkg.currencyCost > 0) {\n        try {\n            const pogData = await takaro.playerOnGameserver.playerOnGameServerControllerGetOne(gameServerId, player.id);\n            const currentCurrency = pogData.data.data.currency || 0;\n\n            console.log(`💰 Currency check: ${currentCurrency} >= ${pkg.currencyCost}`);\n\n            if (currentCurrency < pkg.currencyCost) {\n                console.log('❌ Insufficient currency');\n                const currencyName = (await takaro.settings.settingsControllerGetOne('currencyName', gameServerId)).data.data.value;\n                throw new TakaroUserError(`Insufficient ${currencyName}. Need ${pkg.currencyCost}, have ${currentCurrency}.`);\n            }\n\n            // Deduct currency using negative value\n            await takaro.playerOnGameserver.playerOnGameServerControllerAddCurrency(gameServerId, player.id, {\n                currency: -pkg.currencyCost\n            });\n            console.log(`💰 Deducted ${pkg.currencyCost} currency`);\n        } catch (err) {\n            if (err instanceof TakaroUserError) {\n                throw err;\n            }\n            console.error('❌ Currency operation failed:', err.message);\n            throw new TakaroUserError('Failed to process currency. Please try again.');\n        }\n    }\n\n    const buffNames = pkg.buffNames || [];\n    console.log(`💉 Applying ${buffNames.length} buff(s): ${buffNames.join(', ')}`);\n\n    // Apply all buffs in parallel\n    const buffCommands = buffNames.map(buffName =>\n        takaro.gameserver.gameServerControllerExecuteCommand(gameServerId, {\n            command: `buffplayer \"${player.name}\" ${buffName}`\n        })\n            .then((response) => {\n                const serverResponse = response.data.data?.rawResult || 'No response';\n                console.log(`   ✓ Applied ${buffName}`);\n                console.log(`      Server response: ${serverResponse}`);\n                return { success: true, buff: buffName };\n            })\n            .catch(err => {\n                console.error(`   ❌ Failed to apply ${buffName}:`, err.message);\n                if (err.response?.data?.data?.rawResult) {\n                    console.error(`      Server response: ${err.response.data.data.rawResult}`);\n                }\n                return { success: false, buff: buffName };\n            })\n    );\n\n    const results = await Promise.all(buffCommands);\n    const successCount = results.filter(r => r && r.success).length;\n\n    console.log(`✅ Applied ${successCount}/${buffNames.length} buffs successfully`);\n\n    // Set or update expiration variable if duration is set\n    if (pkg.duration > 0) {\n        const expiryKey = `buff_expiry_${pkg.commandName}`;\n        const expiryTime = Date.now() + pkg.duration;  // ✅ duration is already in milliseconds\n\n        try {\n            // Check if variable already exists\n            const existingVars = await takaro.variable.variableControllerSearch({\n                filters: {\n                    key: [expiryKey],\n                    playerId: [player.id],\n                    gameServerId: [gameServerId],\n                    moduleId: [module.moduleId]\n                }\n            });\n\n            if (existingVars.data.data.length > 0) {\n                // Update existing variable\n                await takaro.variable.variableControllerUpdate(existingVars.data.data[0].id, {\n                    value: expiryTime.toString()\n                });\n                const minutes = Math.floor(pkg.duration / 60000);\n                const hours = Math.floor(minutes / 60);\n                if (hours > 0) {\n                    console.log(`⏰ Expiration updated: ${hours}h ${minutes % 60}m`);\n                } else {\n                    console.log(`⏰ Expiration updated: ${minutes}m`);\n                }\n            } else {\n                // Create new variable\n                await takaro.variable.variableControllerCreate({\n                    key: expiryKey,\n                    value: expiryTime.toString(),\n                    playerId: player.id,\n                    gameServerId: gameServerId,\n                    moduleId: module.moduleId\n                });\n                const minutes = Math.floor(pkg.duration / 60000);\n                const hours = Math.floor(minutes / 60);\n                if (hours > 0) {\n                    console.log(`⏰ Expiration set: ${hours}h ${minutes % 60}m`);\n                } else {\n                    console.log(`⏰ Expiration set: ${minutes}m`);\n                }\n            }\n        } catch (err) {\n            console.error(`⚠️ Failed to set expiration variable:`, err.message);\n            // Don't throw - buff was applied successfully\n        }\n    } else {\n        console.log(`⏰ No expiration (permanent buff)`);\n    }\n\n    // Send confirmation with properly formatted duration\n    let expiryMsg = '';\n    if (pkg.duration > 0) {\n        const minutes = Math.floor(pkg.duration / 60000);\n        const hours = Math.floor(minutes / 60);\n        if (hours > 0) {\n            expiryMsg = ` (expires in ${hours}h ${minutes % 60}m)`;\n        } else {\n            expiryMsg = ` (expires in ${minutes}m)`;\n        }\n    }\n\n    await pog.pm(`${pkg.displayName} applied!${expiryMsg}`);\n    console.log('✅ Command complete');\n}\n\nawait main();",
          "name": "getbuff",
          "description": null,
          "trigger": "getbuff",
          "helpText": "Apply a buff package to yourself. Use /getbuff <packageName> or just /getbuff to see available packages",
          "arguments": [
            {
              "name": "packageName",
              "type": "string",
              "defaultValue": "",
              "helpText": "Name of the buff package to apply (optional - leave empty to list all)",
              "position": 0
            }
          ]
        }
      ],
      "hooks": [
        {
          "function": "import { data, takaro } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, eventData, player, pog, module } = data;\n\n    if (!player) {\n        console.log('❌ Error: Player data is undefined');\n        return;\n    }\n\n    if (!pog) {\n        console.log('❌ Error: Player-on-gameserver (pog) data is undefined');\n        return;\n    }\n\n    console.log(`🔌 Player connected: ${player.name || 'Unknown'} (ID: ${player.id})`);\n\n    const config = module.userConfig;\n    const buffPackages = config.buffPackages || [];\n\n    if (buffPackages.length === 0) {\n        console.log('⚠️ No buff packages configured');\n        return;\n    }\n\n    // Filter packages that should auto-apply\n    const autoApplyPackages = buffPackages.filter(pkg => pkg.autoApplyOnConnect === true);\n\n    if (autoApplyPackages.length === 0) {\n        console.log('⚠️ No packages with auto-apply enabled');\n        return;\n    }\n\n    console.log(`🔍 Checking ${autoApplyPackages.length} auto-apply package(s)`);\n\n    const playerRoles = pog.roles || [];\n    const playerRoleIds = playerRoles.map(r => r.role.id);\n\n    console.log(`   Player has ${playerRoleIds.length} role(s)${playerRoleIds.length > 0 ? ': ' + playerRoleIds.join(', ') : ''}`);\n\n    // Check each package for role requirements\n    const eligiblePackages = autoApplyPackages.filter(pkg => {\n        // If no role required, everyone is eligible\n        if (!pkg.requiredRoleId || pkg.requiredRoleId.trim() === '') {\n            console.log(`   ✓ ${pkg.displayName}: No role required - eligible`);\n            return true;\n        }\n\n        // Check if player has the required role\n        const hasRole = playerRoleIds.includes(pkg.requiredRoleId);\n        const icon = hasRole ? '✓' : '✗';\n        console.log(`   ${icon} ${pkg.displayName}: ${hasRole ? 'HAS' : 'MISSING'} role ${pkg.requiredRoleId}`);\n        return hasRole;\n    });\n\n    if (eligiblePackages.length === 0) {\n        console.log('⚠️ Player is not eligible for any auto-apply packages');\n        return;\n    }\n\n    console.log(`\\n💉 Applying ${eligiblePackages.length} buff package(s) to ${player.name}`);\n\n    // Statistics\n    const stats = {\n        packagesApplied: 0,\n        buffsTotalApplied: 0,\n        packagesSkipped: 0,\n        errors: 0\n    };\n\n    // Get existing buff variables to check what's already active\n    let existingBuffVars = [];\n    try {\n        const varsRes = await takaro.variable.variableControllerSearch({\n            filters: {\n                playerId: [player.id],\n                gameServerId: [gameServerId],\n                moduleId: [module.moduleId]\n            }\n        });\n        existingBuffVars = (varsRes.data.data || []).filter(v => v.key.startsWith('buff_expiry_'));\n        console.log(`   Found ${existingBuffVars.length} existing buff variable(s)`);\n    } catch (err) {\n        console.log(`   ⚠️ Could not fetch existing variables: ${err.message}`);\n    }\n\n    // Apply each eligible package\n    for (const pkg of eligiblePackages) {\n        console.log(`\\n📦 Processing package: ${pkg.displayName}`);\n\n        try {\n            // Check if this package is already active and not expired\n            const expiryKey = `buff_expiry_${pkg.commandName}`;\n            const existingVar = existingBuffVars.find(v => v.key === expiryKey);\n\n            if (existingVar && pkg.duration > 0) {  // ✅ Fixed: pkg.duration\n                const expiryTime = parseInt(existingVar.value);\n                const now = Date.now();\n                const isStillActive = expiryTime > now;\n\n                if (isStillActive) {\n                    const msRemaining = expiryTime - now;\n                    const minutesRemaining = Math.floor(msRemaining / 60000);\n                    const hoursRemaining = Math.floor(msRemaining / 3600000);\n\n                    const timeStr = hoursRemaining > 0\n                        ? `${hoursRemaining}h ${minutesRemaining % 60}m`\n                        : `${minutesRemaining}m`;\n\n                    console.log(`   ⏭️  Already active (${timeStr} remaining) - skipping`);\n                    stats.packagesSkipped++;\n                    continue;\n                }\n            }\n\n            const buffNames = pkg.buffNames || [];\n            if (buffNames.length === 0) {\n                console.log('   ⚠️ No buffs configured - skipping');\n                stats.packagesSkipped++;\n                continue;\n            }\n\n            console.log(`   Buffs to apply: ${buffNames.join(', ')}`);\n\n            // Apply all buffs in this package in parallel\n            const buffCommands = buffNames.map(buffName =>\n                takaro.gameserver.gameServerControllerExecuteCommand(gameServerId, {\n                    command: `buffplayer \"${player.name}\" ${buffName}`\n                })\n                    .then((response) => {\n                        const serverResponse = response.data.data?.rawResult || 'No response';\n                        console.log(`      ✓ Applied ${buffName}`);\n                        return { success: true };\n                    })\n                    .catch(error => {\n                        console.log(`      ✗ Failed to apply ${buffName}: ${error.message}`);\n                        stats.errors++;\n                        return { success: false };\n                    })\n            );\n\n            const results = await Promise.all(buffCommands);\n            const successCount = results.filter(r => r.success).length;\n\n            console.log(`   ✅ Applied ${successCount}/${buffNames.length} buffs`);\n\n            if (successCount > 0) {\n                stats.packagesApplied++;\n                stats.buffsTotalApplied += successCount;\n            }\n\n            // Set or update expiration variable if duration is set\n            if (pkg.duration > 0) {  // ✅ Fixed: pkg.duration\n                try {\n                    const expiryTime = Date.now() + pkg.duration;  // ✅ Fixed: duration is already in milliseconds\n\n                    const minutes = Math.floor(pkg.duration / 60000);\n                    const hours = Math.floor(minutes / 60);\n                    const timeStr = hours > 0 ? `${hours}h ${minutes % 60}m` : `${minutes}m`;\n\n                    if (existingVar) {\n                        // Update existing variable\n                        await takaro.variable.variableControllerUpdate(existingVar.id, {\n                            value: expiryTime.toString()\n                        });\n                        console.log(`   ⏰ Expiration updated: ${timeStr}`);\n                    } else {\n                        // Create new variable\n                        await takaro.variable.variableControllerCreate({\n                            key: expiryKey,\n                            value: expiryTime.toString(),\n                            playerId: player.id,\n                            gameServerId: gameServerId,\n                            moduleId: module.moduleId\n                        });\n                        console.log(`   ⏰ Expiration set: ${timeStr}`);\n                    }\n                } catch (err) {\n                    console.log(`   ⚠️ Failed to set/update expiration: ${err.message}`);\n                    stats.errors++;\n                }\n            } else {\n                console.log(`   ⏰ No expiration (permanent buff)`);\n            }\n        } catch (err) {\n            console.log(`   ❌ Error processing package ${pkg.displayName}: ${err.message}`);\n            stats.errors++;\n        }\n    }\n\n    // Send welcome message if any buffs were applied\n    if (stats.packagesApplied > 0) {\n        try {\n            const packageNames = eligiblePackages\n                .filter(pkg => {\n                    // Only include packages that weren't skipped\n                    const expiryKey = `buff_expiry_${pkg.commandName}`;\n                    const wasSkipped = existingBuffVars.find(v => v.key === expiryKey && parseInt(v.value) > Date.now());\n                    return !wasSkipped;\n                })\n                .map(p => p.displayName)\n                .join(', ');\n\n            if (packageNames) {\n                await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n                    message: `Welcome ${player.name}! Auto-applied buffs: ${packageNames}`,\n                    opts: {\n                        recipient: {\n                            gameId: pog.gameId\n                        }\n                    }\n                });\n                console.log('\\n✅ Welcome message sent');\n            }\n        } catch (error) {\n            console.log(`\\n⚠️ Failed to send welcome message: ${error.message}`);\n        }\n    }\n\n    // Summary\n    console.log('\\n✅ Auto-apply complete');\n    console.log(`📊 Summary:`);\n    console.log(`   - Packages applied: ${stats.packagesApplied}`);\n    console.log(`   - Packages skipped (already active): ${stats.packagesSkipped}`);\n    console.log(`   - Total buffs applied: ${stats.buffsTotalApplied}`);\n    if (stats.errors > 0) {\n        console.log(`   - Errors: ${stats.errors} ⚠️`);\n    }\n}\n\nawait main();",
          "name": "Auto-Apply Buff Packages",
          "description": "Automatically applies buff packages to players based on role requirements when they connect",
          "eventType": "player-connected",
          "regex": ""
        }
      ],
      "cronJobs": [
        {
          "function": "import { data, takaro } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, module } = data;\n\n    const config = module.userConfig;\n    const buffPackages = config.buffPackages || [];\n\n    console.log(`🔄 Buff Expiration Check & Maintenance starting...`);\n\n    if (!config.maintenanceEnabled) {\n        console.log('⏸️  Maintenance is DISABLED in config - skipping');\n        return;\n    }\n\n    if (buffPackages.length === 0) {\n        console.log('⚠️ No buff packages configured');\n        return;\n    }\n\n    console.log(`   Configured packages: ${buffPackages.map(p => p.displayName).join(', ')}`);\n\n    // Statistics tracking\n    const stats = {\n        playersProcessed: 0,\n        buffPackagesMaintained: 0,\n        buffPackagesExpiredAndRemoved: 0,\n        totalBuffsReapplied: 0,\n        errors: 0\n    };\n\n    try {\n        // Get all online players\n        const playersRes = await takaro.gameserver.gameServerControllerGetPlayers(gameServerId);\n        const onlinePlayers = playersRes.data.data || playersRes.data || [];\n\n        console.log(`\\n👥 Found ${onlinePlayers.length} online player(s)`);\n\n        if (onlinePlayers.length === 0) {\n            console.log('   No players online - nothing to do');\n            return;\n        }\n\n        // Get POG (PlayerOnGameServer) data for each online player\n        const playerPogsPromises = onlinePlayers.map(async (onlinePlayer) => {\n            try {\n                const playerRes = await takaro.player.playerControllerSearch({\n                    filters: {\n                        steamId: [onlinePlayer.steamId]\n                    },\n                    limit: 1\n                });\n\n                if (!playerRes.data.data || playerRes.data.data.length === 0) {\n                    console.log(`⚠️  Player ${onlinePlayer.name} not found in Takaro database`);\n                    return null;\n                }\n\n                const takaroPlayer = playerRes.data.data[0];\n                const pogRes = await takaro.playerOnGameserver.playerOnGameServerControllerGetOne(\n                    gameServerId,\n                    takaroPlayer.id\n                );\n\n                return {\n                    onlinePlayer,\n                    takaroPlayer,\n                    pog: pogRes.data.data\n                };\n            } catch (err) {\n                console.error(`❌ Error fetching POG for ${onlinePlayer.name}:`, err.message);\n                stats.errors++;\n                return null;\n            }\n        });\n\n        const playerPogsResults = await Promise.all(playerPogsPromises);\n        const validPlayers = playerPogsResults.filter(result => result !== null);\n\n        console.log(`\\n🔍 Processing ${validPlayers.length} player(s)...\\n`);\n\n        // Process each player\n        for (const { onlinePlayer, takaroPlayer, pog } of validPlayers) {\n            console.log(`\\n👤 Player: ${onlinePlayer.name}`);\n            stats.playersProcessed++;\n\n            try {\n                const playerRoles = pog.roles || [];\n                const playerRoleIds = playerRoles.map(r => r.role.id);\n                console.log(`   Roles: ${playerRoleIds.length > 0 ? playerRoleIds.join(', ') : 'none'}`);\n\n                // Get all buff expiration variables for this player\n                console.log(`   🔍 Searching for variables with filters:`);\n                console.log(`      - playerId: ${takaroPlayer.id}`);\n                console.log(`      - gameServerId: ${gameServerId}`);\n                console.log(`      - moduleId: ${module.moduleId}`);\n\n                const variablesRes = await takaro.variable.variableControllerSearch({\n                    filters: {\n                        playerId: [takaroPlayer.id],\n                        gameServerId: [gameServerId],\n                        moduleId: [module.moduleId]\n                    }\n                });\n\n                const variables = variablesRes.data.data || [];\n                console.log(`   📦 Total variables found: ${variables.length}`);\n                if (variables.length > 0) {\n                    console.log(`   📝 Variable keys: ${variables.map(v => v.key).join(', ')}`);\n                }\n\n                const expiryVariables = variables.filter(v => v.key.startsWith('buff_expiry_'));\n                console.log(`   ⏰ Active buff tracking variables: ${expiryVariables.length}`);\n\n                if (expiryVariables.length === 0) {\n                    console.log(`   No active buffs to check/maintain`);\n                    continue;\n                }\n\n                // Check each buff package variable\n                for (const variable of expiryVariables) {\n                    const commandName = variable.key.replace('buff_expiry_', '');\n                    const pkg = buffPackages.find(p => p.commandName === commandName);\n\n                    if (!pkg) {\n                        console.log(`\\n   ⚠️  Package \"${commandName}\" no longer exists in config`);\n                        console.log(`      🗑️  Cleaning up orphaned variable`);\n                        try {\n                            await takaro.variable.variableControllerDelete(variable.id);\n                            console.log(`      ✓ Deleted orphaned variable`);\n                        } catch (err) {\n                            console.log(`      ⚠️  Failed to delete: ${err.message}`);\n                        }\n                        continue;\n                    }\n\n                    console.log(`\\n   📦 Package: ${pkg.displayName}`);\n\n                    try {\n                        // STEP 1: Check if expired\n                        const expiryTime = parseInt(variable.value);\n                        const now = Date.now();\n                        const isExpired = pkg.duration > 0 && expiryTime > 0 && now > expiryTime;  // ✅ Fixed: pkg.duration\n\n                        // Debug logging\n                        console.log(`      📅 Debug: Expiry=${new Date(expiryTime).toISOString()}, Now=${new Date(now).toISOString()}, Duration=${pkg.duration}ms`);\n                        console.log(`      🔍 Expired check: ${isExpired} (now ${now} > expiry ${expiryTime})`)\n\n                        if (isExpired) {\n                            const msExpired = now - expiryTime;\n                            const minutesExpired = Math.floor(msExpired / 60000);\n                            const hoursExpired = Math.floor(msExpired / 3600000);\n\n                            const expiredTimeStr = hoursExpired > 0\n                                ? `${hoursExpired}h ${minutesExpired % 60}m`\n                                : `${minutesExpired}m`;\n\n                            console.log(`      ⏰ EXPIRED ${expiredTimeStr} ago`);\n                            console.log(`      🗑️  Removing expired buffs from player`);\n\n                            // Remove the actual buffs from the player\n                            const buffNames = pkg.buffNames || [];\n                            console.log(`      💊 Removing ${buffNames.length} buff(s): ${buffNames.join(', ')}`);\n\n                            const debuffCommands = buffNames.map(buffName =>\n                                takaro.gameserver.gameServerControllerExecuteCommand(gameServerId, {\n                                    command: `debuffplayer \"${onlinePlayer.name}\" ${buffName}`\n                                })\n                                    .then(() => {\n                                        console.log(`         ✓ Removed ${buffName}`);\n                                        return { success: true };\n                                    })\n                                    .catch(err => {\n                                        console.error(`         ❌ Failed to remove ${buffName}: ${err.message}`);\n                                        return { success: false };\n                                    })\n                            );\n\n                            const removeResults = await Promise.all(debuffCommands);\n                            const removedCount = removeResults.filter(r => r.success).length;\n                            console.log(`      ✅ Removed ${removedCount}/${buffNames.length} buffs from player`);\n\n                            // Send expiration notification to player\n                            if (removedCount > 0) {\n                                try {\n                                    await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n                                        message: `⏰ ${pkg.displayName} has expired and been removed.`,\n                                        opts: {\n                                            recipient: {\n                                                gameId: pog.gameId\n                                            }\n                                        }\n                                    });\n                                    console.log(`      📬 Expiration notification sent to player`);\n                                } catch (err) {\n                                    console.log(`      ⚠️  Failed to send notification: ${err.message}`);\n                                }\n                            }\n\n                            // Clean up expired variable\n                            try {\n                                await takaro.variable.variableControllerDelete(variable.id);\n                                stats.buffPackagesExpiredAndRemoved++;\n                                console.log(`      ✓ Tracking variable deleted`);\n                            } catch (err) {\n                                console.log(`      ⚠️  Failed to delete variable: ${err.message}`);\n                                stats.errors++;\n                            }\n                            continue; // Don't re-apply expired buffs\n                        }\n\n                        // STEP 2: Check if player still has required role\n                        if (pkg.requiredRoleId && pkg.requiredRoleId.trim() !== '') {\n                            const hasRole = playerRoleIds.includes(pkg.requiredRoleId);\n\n                            if (!hasRole) {\n                                console.log(`      🔍 Player no longer has required role`);\n                                console.log(`      ⏭️  Skipping (won't re-apply)`);\n                                continue;\n                            }\n                        }\n\n                        // STEP 3: Calculate time remaining (for active buffs)\n                        if (pkg.duration > 0) {  // ✅ Fixed: pkg.duration\n                            const msRemaining = expiryTime - now;\n                            const minutesRemaining = Math.floor(msRemaining / 60000);\n                            const hoursRemaining = Math.floor(msRemaining / 3600000);\n\n                            const remainingTimeStr = hoursRemaining > 0\n                                ? `${hoursRemaining}h ${minutesRemaining % 60}m`\n                                : `${minutesRemaining}m`;\n\n                            console.log(`      ⏰ Active - Expires in ${remainingTimeStr}`);\n                        } else {\n                            console.log(`      ⏰ Active - Permanent (no expiration)`);\n                        }\n\n                        // STEP 4: Re-apply active buffs to maintain them\n                        const buffNames = pkg.buffNames || [];\n                        console.log(`      💉 Re-applying ${buffNames.length} buff(s): ${buffNames.join(', ')}`);\n\n                        const buffCommands = buffNames.map(buffName =>\n                            takaro.gameserver.gameServerControllerExecuteCommand(gameServerId, {\n                                command: `buffplayer \"${onlinePlayer.name}\" ${buffName}`\n                            })\n                                .then(() => {\n                                    console.log(`         ✓ Applied ${buffName}`);\n                                    return { success: true };\n                                })\n                                .catch(err => {\n                                    console.error(`         ❌ Failed ${buffName}: ${err.message}`);\n                                    stats.errors++;\n                                    return { success: false };\n                                })\n                        );\n\n                        const results = await Promise.all(buffCommands);\n                        const successCount = results.filter(r => r.success).length;\n\n                        stats.totalBuffsReapplied += successCount;\n                        stats.buffPackagesMaintained++;\n\n                        console.log(`      ✅ Maintained ${successCount}/${buffNames.length} buffs`);\n                    } catch (err) {\n                        console.error(`      ❌ Error processing package ${pkg.displayName}:`, err.message);\n                        stats.errors++;\n                    }\n                }\n            } catch (err) {\n                console.error(`   ❌ Error processing player ${onlinePlayer.name}:`, err.message);\n                stats.errors++;\n            }\n        }\n    } catch (err) {\n        console.error(`❌ Fatal error in buff check & maintenance:`, err.message);\n        stats.errors++;\n    }\n\n    // Print summary\n    console.log(`\\n✅ Buff Check & Maintenance Complete`);\n    console.log(`📊 Summary:`);\n    console.log(`   - Players processed: ${stats.playersProcessed}`);\n    console.log(`   - Active buff packages maintained: ${stats.buffPackagesMaintained}`);\n    console.log(`   - Expired buffs removed: ${stats.buffPackagesExpiredAndRemoved}`);\n    console.log(`   - Total buffs re-applied: ${stats.totalBuffsReapplied}`);\n    if (stats.errors > 0) {\n        console.log(`   - Errors encountered: ${stats.errors} ⚠️`);\n    }\n}\n\nawait main();",
          "name": "check Buff Packages",
          "description": "Re-applies non-expired buffs to online players every 15 minutes to keep them active",
          "temporalValue": "* * * * *"
        }
      ],
      "functions": [],
      "permissions": [
        {
          "canHaveCount": false,
          "description": "Can manage and apply any buff package",
          "permission": "BUFF_ADMIN",
          "friendlyName": "Buff Administrator"
        }
      ]
    }
  ],
  "takaroVersion": "main"
}
