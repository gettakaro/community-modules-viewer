{
  "name": "Banned Items",
  "author": "Mad",
  "supportedGames": ["all"],
  "versions": [
    {
      "tag": "latest",
      "description": "Consolidated module for managing banned items with configurable immunity permissions per item. Efficiently checks player inventories using the new playerongameserver data structure. Server owners can select from predefined permission tiers for each item.",
      "configSchema": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"type\":\"object\",\"required\":[],\"additionalProperties\":false,\"properties\":{\"bannedItems\":{\"title\":\"Banned Items\",\"description\":\"Select items that players should not have in their inventory and configure immunity permissions for each\",\"type\":\"array\",\"items\":{\"type\":\"object\",\"title\":\"Item\",\"additionalProperties\":false,\"properties\":{\"item\":{\"type\":\"string\",\"title\":\"Item\",\"x-component\":\"item\"},\"amount\":{\"type\":\"number\",\"title\":\"Amount\"},\"quality\":{\"type\":\"string\",\"title\":\"Quality\"},\"immunityPermission\":{\"type\":\"string\",\"title\":\"Immunity Permission\",\"description\":\"Select which permission tier can have this item without punishment\",\"enum\":[\"None\",\"Admin\",\"VIP\",\"Moderator\",\"Patreon\",\"Donor\",\"Trusted\"],\"default\":\"None\"},\"warningsBeforePunishment\":{\"title\":\"Warnings Before Punishment\",\"description\":\"Number of warnings before punishment is applied for this item\",\"default\":0,\"type\":\"number\",\"minimum\":0,\"maximum\":100},\"punishmentType\":{\"title\":\"Punishment Type\",\"description\":\"Action to take after warnings are exceeded for this item\",\"default\":\"kick\",\"type\":\"string\",\"enum\":[\"kick\",\"ban\",\"arrest\",\"none\"]}}}},\"banDuration\":{\"title\":\"Ban Duration\",\"description\":\"How long to ban the player (only applies if punishment type is 'ban')\",\"default\":86400000,\"x-component\":\"duration\",\"type\":\"number\"},\"kickMessage\":{\"title\":\"Kick Message\",\"description\":\"Message shown when player is kicked. Use {item} for item name\",\"default\":\"You have been kicked for possessing: {item}\",\"type\":\"string\"},\"banMessage\":{\"title\":\"Ban Message\",\"description\":\"Message shown when player is banned. Use {item} for item name\",\"default\":\"You have been banned for possessing: {item}\",\"type\":\"string\"},\"warningMessage\":{\"title\":\"Warning Message\",\"description\":\"Message shown for each warning. Use {item} for item name\",\"default\":\"Remove {item} from your inventory immediately!\",\"type\":\"string\"},\"arrestMessage\":{\"title\":\"Arrest Message\",\"description\":\"Message shown when player is arrested. Use {pname} for player name, {item} for item name\",\"default\":\"Player {pname} has been arrested for possessing {item}. Open a ticket to be released.\",\"type\":\"string\"},\"discordKickMessage\":{\"title\":\"Discord Kick Message\",\"description\":\"Message sent to Discord when player is kicked. Use {pname} for player name, {item} for item name\",\"default\":\"⚠️ Player **{pname}** was kicked for possessing: **{item}**\",\"type\":\"string\"},\"discordBanMessage\":{\"title\":\"Discord Ban Message\",\"description\":\"Message sent to Discord when player is banned. Use {pname} for player name, {item} for item name\",\"default\":\"🚫 Player **{pname}** was banned for possessing: **{item}**\",\"type\":\"string\"},\"discordArrestMessage\":{\"title\":\"Discord Arrest Message\",\"description\":\"Message sent to Discord when player is arrested. Use {pname} for player name, {item} for item name\",\"default\":\"⚠️ Player **{pname}** was arrested for possessing: **{item}**\",\"type\":\"string\"},\"discordWarningMessage\":{\"title\":\"Discord Warning Message\",\"description\":\"Message sent to Discord when player receives a warning. Use {pname} for player name, {item} for item name, {warnings} for warning count, {maxWarnings} for max warnings\",\"default\":\"⚡ Player **{pname}** warned for possessing: **{item}** (Warning {warnings}/{maxWarnings})\",\"type\":\"string\"},\"cheaterDetected\":{\"title\":\"Discord Alert Channel\",\"description\":\"Discord channel ID to send alerts when punishments are applied\",\"type\":\"string\"}}}",
      "uiSchema": "{\"bannedItems\":{\"items\":{\"item\":{\"ui:widget\":\"item\"},\"amount\":{\"ui:widget\":\"hidden\"},\"quality\":{\"ui:widget\":\"hidden\"}}},\"banDuration\":{\"ui:widget\":\"duration\"}}",
      "commands": [],
      "hooks": [],
      "cronJobs": [
        {
          "function": "import { takaro, data, checkPermission } from '@takaro/helpers';\n\nasync function main() {\n    const { module: mod, gameServerId } = data;\n    const {\n        bannedItems = [],\n        banDuration,\n        kickMessage,\n        banMessage,\n        warningMessage,\n        arrestMessage,\n        cheaterDetected,\n        discordKickMessage,\n        discordBanMessage,\n        discordArrestMessage,\n        discordWarningMessage\n    } = mod.userConfig;\n\n    if (!bannedItems || bannedItems.length === 0) {\n        console.log(\"No banned items configured. Exiting.\");\n        return;\n    }\n\n    // Build lookup maps for banned items with their configs\n    const itemIds = bannedItems.map(item => item.item);\n    const itemResponse = await takaro.item.itemControllerSearch({\n        filters: {\n            id: itemIds,\n            gameserverId: [gameServerId]\n        }\n    });\n\n    // Map item code/name to the full banned item config (including per-item settings)\n    const bannedItemConfigByCode = new Map();\n    const bannedItemConfigByName = new Map();\n    \n    itemResponse.data.data.forEach(item => {\n        // Find the config for this item\n        const config = bannedItems.find(bi => bi.item === item.id);\n        if (config) {\n            bannedItemConfigByCode.set(item.code, config);\n            bannedItemConfigByName.set(item.name, config);\n        }\n    });\n\n    console.log(`Checking for ${bannedItemConfigByCode.size} banned items...`);\n\n    // Get players who are online AND have been seen in the last 5 minutes for efficiency\n    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000).toISOString();\n    \n    const playersResponse = await takaro.playerOnGameserver.playerOnGameServerControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            online: [true]\n        },\n        greaterThan: {\n            lastSeen: fiveMinutesAgo\n        }\n    });\n\n    console.log(`Found ${playersResponse.data.data.length} active players (online + seen in last 5 minutes).`);\n\n    // Process each player\n    for (const pog of playersResponse.data.data) {\n        // Check if player has inventory\n        if (!pog.inventory || pog.inventory.length === 0) {\n            continue;\n        }\n\n        // Check for banned items - find first banned item in inventory\n        const bannedItemInInventory = pog.inventory.find(item =>\n            item && (bannedItemConfigByCode.has(item.code) || bannedItemConfigByName.has(item.name))\n        );\n\n        if (!bannedItemInInventory) continue;\n\n        // Get the config for this specific banned item\n        const bannedItemConfig = bannedItemConfigByCode.get(bannedItemInInventory.code) || \n                                 bannedItemConfigByName.get(bannedItemInInventory.name);\n\n        // Get per-item settings (default to 0 warnings)\n        const warningsBeforePunishment = bannedItemConfig.warningsBeforePunishment ?? 0;\n        const punishmentType = bannedItemConfig.punishmentType || 'kick';\n\n        // Check immunity for THIS SPECIFIC ITEM\n        let hasImmunity = false;\n        if (bannedItemConfig.immunityPermission && bannedItemConfig.immunityPermission !== 'None') {\n            const fullPermission = `banned_items_immunity_${bannedItemConfig.immunityPermission.toLowerCase()}`;\n            if (checkPermission(pog, fullPermission)) {\n                hasImmunity = true;\n                console.log(`Player ${pog.playerId} has immunity for ${bannedItemInInventory.name} via permission: ${fullPermission}`);\n            }\n        }\n\n        if (hasImmunity) continue;\n\n        // Get player name for messages\n        const playerDetails = await takaro.player.playerControllerGetOne(pog.playerId);\n        const playerName = playerDetails.data.data.name;\n\n        console.log(`Player ${playerName} found with banned item: ${bannedItemInInventory.name}`);\n\n        // Get current warnings for THIS SPECIFIC ITEM\n        const warningKey = `banned_items_warning_${bannedItemConfig.item}`;\n        const existingVariable = await takaro.variable.variableControllerSearch({\n            filters: {\n                playerId: [pog.playerId],\n                key: [warningKey],\n                moduleId: [data.module.moduleId]\n            },\n        });\n\n        let currentWarnings = 0;\n        if (existingVariable.data.data.length > 0) {\n            currentWarnings = parseInt(existingVariable.data.data[0].value, 10) || 0;\n        }\n        currentWarnings++;\n\n        // Apply punishment if warnings exceeded\n        if (currentWarnings > warningsBeforePunishment && punishmentType !== 'none') {\n            const itemMessage = bannedItemInInventory.name;\n\n            if (punishmentType === 'arrest') {\n                const formattedMessage = arrestMessage\n                    .replace('{pname}', playerName)\n                    .replace('{item}', itemMessage);\n                const formattedMessageDiscord = discordArrestMessage\n                    .replace('{pname}', playerName)\n                    .replace('{item}', itemMessage);\n\n                await takaro.gameserver.gameServerControllerExecuteCommand(gameServerId, {\n                    command: `arrest \"EOS_${playerDetails.data.data.epicOnlineServicesId}\"`,\n                });\n\n                if (cheaterDetected && discordArrestMessage) {\n                    await takaro.discord.discordControllerSendMessage(cheaterDetected, {\n                        message: formattedMessageDiscord,\n                    });\n                }\n\n                await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n                    message: formattedMessage,\n                });\n            } else if (punishmentType === 'kick') {\n                const formattedMessageDiscord = discordKickMessage\n                    .replace('{pname}', playerName)\n                    .replace('{item}', itemMessage);\n\n                await takaro.gameserver.gameServerControllerKickPlayer(gameServerId, pog.playerId, {\n                    reason: kickMessage.replace('{item}', itemMessage)\n                });\n\n                await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n                    message: `${playerName} has been kicked for having banned item: ${itemMessage}`\n                });\n\n                if (cheaterDetected && discordKickMessage) {\n                    await takaro.discord.discordControllerSendMessage(cheaterDetected, {\n                        message: formattedMessageDiscord,\n                    });\n                }\n            } else if (punishmentType === 'ban') {\n                const formattedMessageDiscord = discordBanMessage\n                    .replace('{pname}', playerName)\n                    .replace('{item}', itemMessage);\n\n                const now = new Date();\n                const expiresAt = new Date(now.getTime() + banDuration);\n                await takaro.player.banControllerCreate({\n                    gameServerId,\n                    playerId: pog.playerId,\n                    until: expiresAt,\n                    reason: banMessage.replace('{item}', itemMessage)\n                });\n\n                await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n                    message: `${playerName} has been banned for having banned item: ${itemMessage}`\n                });\n\n                if (cheaterDetected && discordBanMessage) {\n                    await takaro.discord.discordControllerSendMessage(cheaterDetected, {\n                        message: formattedMessageDiscord,\n                    });\n                }\n            }\n\n            // Reset warnings after punishment\n            if (existingVariable.data.data.length > 0) {\n                await takaro.variable.variableControllerDelete(existingVariable.data.data[0].id);\n            }\n        } else {\n            // Issue warning\n            let message = warningMessage.replace('{item}', bannedItemInInventory.name);\n            if (punishmentType !== 'none' && warningsBeforePunishment > 0) {\n                message += ` Warning ${currentWarnings} of ${warningsBeforePunishment} before ${punishmentType}`;\n            }\n\n            await takaro.gameserver.gameServerControllerSendMessage(gameServerId, { message });\n\n            // Send Discord warning notification if configured\n            if (cheaterDetected && discordWarningMessage) {\n                const formattedWarningDiscord = discordWarningMessage\n                    .replace('{pname}', playerName)\n                    .replace('{item}', bannedItemInInventory.name)\n                    .replace('{warnings}', currentWarnings.toString())\n                    .replace('{maxWarnings}', warningsBeforePunishment.toString());\n\n                await takaro.discord.discordControllerSendMessage(cheaterDetected, {\n                    message: formattedWarningDiscord,\n                });\n            }\n\n            // Update warning count for this specific item\n            if (existingVariable.data.data.length > 0) {\n                await takaro.variable.variableControllerUpdate(existingVariable.data.data[0].id, {\n                    value: currentWarnings.toString()\n                });\n            } else {\n                await takaro.variable.variableControllerCreate({\n                    playerId: pog.playerId,\n                    key: warningKey,\n                    value: currentWarnings.toString(),\n                    moduleId: data.module.moduleId\n                });\n            }\n        }\n    }\n\n    console.log(\"Finished checking all online players.\");\n}\n\nawait main();",
          "name": "CheckBannedItems",
          "description": "Runs the banned items check on all online players",
          "temporalValue": "*/5 * * * *"
        }
      ],
      "functions": [
        {
          "function": "import { takaro, data, checkPermission } from '@takaro/helpers';\n\nasync function main() {\n    const { module: mod, gameServerId } = data;\n    const {\n        bannedItems = [],\n        banDuration,\n        kickMessage,\n        banMessage,\n        warningMessage,\n        arrestMessage,\n        cheaterDetected,\n        discordArrestMessage\n    } = mod.userConfig;\n\n    if (!bannedItems || bannedItems.length === 0) {\n        console.log(\"No banned items configured. Exiting.\");\n        return;\n    }\n\n    // Build lookup maps for banned items with their configs\n    const itemIds = bannedItems.map(item => item.item);\n    const itemResponse = await takaro.item.itemControllerSearch({\n        filters: {\n            id: itemIds,\n            gameserverId: [gameServerId]\n        }\n    });\n\n    // Map item code/name to the full banned item config (including per-item settings)\n    const bannedItemConfigByCode = new Map();\n    const bannedItemConfigByName = new Map();\n    \n    itemResponse.data.data.forEach(item => {\n        // Find the config for this item\n        const config = bannedItems.find(bi => bi.item === item.id);\n        if (config) {\n            bannedItemConfigByCode.set(item.code, config);\n            bannedItemConfigByName.set(item.name, config);\n        }\n    });\n\n    console.log(`Checking for ${bannedItemConfigByCode.size} banned items...`);\n\n    // Get players who are online AND have been seen in the last 5 minutes for efficiency\n    const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000).toISOString();\n    \n    const playersResponse = await takaro.playerOnGameserver.playerOnGameServerControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            online: [true]\n        },\n        greaterThan: {\n            lastSeen: fiveMinutesAgo\n        }\n    });\n\n    console.log(`Found ${playersResponse.data.data.length} active players (online + seen in last 5 minutes).`);\n\n    // Process each player\n    for (const pog of playersResponse.data.data) {\n        // Check if player has inventory\n        if (!pog.inventory || pog.inventory.length === 0) {\n            continue;\n        }\n\n        // Check for banned items - find first banned item in inventory\n        const bannedItemInInventory = pog.inventory.find(item =>\n            item && (bannedItemConfigByCode.has(item.code) || bannedItemConfigByName.has(item.name))\n        );\n\n        if (!bannedItemInInventory) continue;\n\n        // Get the config for this specific banned item\n        const bannedItemConfig = bannedItemConfigByCode.get(bannedItemInInventory.code) || \n                                 bannedItemConfigByName.get(bannedItemInInventory.name);\n\n        // Get per-item settings (default to 0 warnings)\n        const warningsBeforePunishment = bannedItemConfig.warningsBeforePunishment ?? 0;\n        const punishmentType = bannedItemConfig.punishmentType || 'kick';\n\n        // Check immunity for THIS SPECIFIC ITEM\n        let hasImmunity = false;\n        if (bannedItemConfig.immunityPermission && bannedItemConfig.immunityPermission !== 'None') {\n            const fullPermission = `banned_items_immunity_${bannedItemConfig.immunityPermission.toLowerCase()}`;\n            if (checkPermission(pog, fullPermission)) {\n                hasImmunity = true;\n                console.log(`Player ${pog.playerId} has immunity for ${bannedItemInInventory.name} via permission: ${fullPermission}`);\n            }\n        }\n\n        if (hasImmunity) continue;\n\n        // Get player name for messages\n        const playerDetails = await takaro.player.playerControllerGetOne(pog.playerId);\n        const playerName = playerDetails.data.data.name;\n\n        console.log(`Player ${playerName} found with banned item: ${bannedItemInInventory.name}`);\n\n        // Get current warnings for THIS SPECIFIC ITEM\n        const warningKey = `banned_items_warning_${bannedItemConfig.item}`;\n        const existingVariable = await takaro.variable.variableControllerSearch({\n            filters: {\n                playerId: [pog.playerId],\n                key: [warningKey],\n                moduleId: [data.module.moduleId]\n            },\n        });\n\n        let currentWarnings = 0;\n        if (existingVariable.data.data.length > 0) {\n            currentWarnings = parseInt(existingVariable.data.data[0].value, 10) || 0;\n        }\n        currentWarnings++;\n\n        // Apply punishment if warnings exceeded\n        if (currentWarnings > warningsBeforePunishment && punishmentType !== 'none') {\n            const itemMessage = bannedItemInInventory.name;\n\n            if (punishmentType === 'arrest') {\n                const formattedMessage = arrestMessage\n                    .replace('{pname}', playerName)\n                    .replace('{item}', itemMessage);\n                const formattedMessageDiscord = discordArrestMessage\n                    .replace('{pname}', playerName)\n                    .replace('{item}', itemMessage);\n\n                await takaro.gameserver.gameServerControllerExecuteCommand(gameServerId, {\n                    command: `arrest \"EOS_${playerDetails.data.data.epicOnlineServicesId}\"`,\n                });\n\n                if (cheaterDetected && discordArrestMessage) {\n                    await takaro.discord.discordControllerSendMessage(cheaterDetected, {\n                        message: formattedMessageDiscord,\n                    });\n                }\n\n                await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n                    message: formattedMessage,\n                });\n            } else if (punishmentType === 'kick') {\n                await takaro.gameserver.gameServerControllerKickPlayer(gameServerId, pog.playerId, {\n                    reason: kickMessage.replace('{item}', itemMessage)\n                });\n                await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n                    message: `${playerName} has been kicked for having banned item: ${itemMessage}`\n                });\n            } else if (punishmentType === 'ban') {\n                const now = new Date();\n                const expiresAt = new Date(now.getTime() + banDuration);\n                await takaro.player.banControllerCreate({\n                    gameServerId,\n                    playerId: pog.playerId,\n                    until: expiresAt,\n                    reason: banMessage.replace('{item}', itemMessage)\n                });\n                await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n                    message: `${playerName} has been banned for having banned item: ${itemMessage}`\n                });\n            }\n\n            // Reset warnings after punishment\n            if (existingVariable.data.data.length > 0) {\n                await takaro.variable.variableControllerDelete(existingVariable.data.data[0].id);\n            }\n        } else {\n            // Issue warning\n            let message = warningMessage.replace('{item}', bannedItemInInventory.name);\n            if (punishmentType !== 'none' && warningsBeforePunishment > 0) {\n                message += ` Warning ${currentWarnings} of ${warningsBeforePunishment} before ${punishmentType}`;\n            }\n\n            await takaro.gameserver.gameServerControllerSendMessage(gameServerId, { message });\n\n            // Update warning count for this specific item\n            if (existingVariable.data.data.length > 0) {\n                await takaro.variable.variableControllerUpdate(existingVariable.data.data[0].id, {\n                    value: currentWarnings.toString()\n                });\n            } else {\n                await takaro.variable.variableControllerCreate({\n                    playerId: pog.playerId,\n                    key: warningKey,\n                    value: currentWarnings.toString(),\n                    moduleId: data.module.moduleId\n                });\n            }\n        }\n    }\n\n    console.log(\"Finished checking all online players.\");\n}\n\nawait main();",
          "name": "CheckBannedItems",
          "description": "Checks all online players for banned items and applies warnings or punishments"
        }
      ],
      "permissions": [
        {
          "canHaveCount": false,
          "description": "Grants immunity from banned items checks (Admin tier)",
          "permission": "banned_items_immunity_admin",
          "friendlyName": "Admin Immunity"
        },
        {
          "canHaveCount": false,
          "description": "Grants immunity from banned items checks (VIP tier)",
          "permission": "banned_items_immunity_vip",
          "friendlyName": "VIP Immunity"
        },
        {
          "canHaveCount": false,
          "description": "Grants immunity from banned items checks (Moderator tier)",
          "permission": "banned_items_immunity_moderator",
          "friendlyName": "Moderator Immunity"
        },
        {
          "canHaveCount": false,
          "description": "Grants immunity from banned items checks (Patreon tier)",
          "permission": "banned_items_immunity_patreon",
          "friendlyName": "Patreon Immunity"
        },
        {
          "canHaveCount": false,
          "description": "Grants immunity from banned items checks (Donor tier)",
          "permission": "banned_items_immunity_donor",
          "friendlyName": "Donor Immunity"
        },
        {
          "canHaveCount": false,
          "description": "Grants immunity from banned items checks (Trusted tier)",
          "permission": "banned_items_immunity_trusted",
          "friendlyName": "Trusted Immunity"
        }
      ]
    }
  ],
  "takaroVersion": "v0.4.3"
}
