{
    "name": "Limon_ServerWipe",
    "versions": [
        {
            "tag": "1.0.0",
  "description": "The ServerWipe module provides administrators with a powerful tool to reset server data. It allows selective wiping of player currency, teleport locations, and starter kit claims with a single command.\n\n  ## Key Functionality\n\n  * **Selective Data Wipe:** Administrators can choose to wipe specific types of data:\n      * Player currency\n      * Teleport locations and waypoints\n      * Starter kit claims\n  * **Confirmation Requirement:** The wipe command requires explicit confirmation to prevent accidental data loss.\n  * **Global Announcement:** The module can broadcast a customizable message to all players after the wipe is complete.\n  * **Batch Processing:** For large numbers of players or data entries, the module uses batch processing to improve performance and prevent server overload.\n  * **Error Handling:** The module includes error handling to gracefully manage potential issues during the wipe process and provide informative messages to administrators.\n\n  ## How to Use\n\n  1.  **Configuration:**\n      * `wipeCurrency`: Set to `true` to enable wiping player currency. Default: `false`.\n      * `wipeTeleports`: Set to `true` to enable wiping teleport locations and waypoints. Default: `false`.\n      * `wipeStarterKitClaims`: Set to `true` to enable wiping starter kit claims. Default: `false`.\n      * `globalAnnouncement`: Enter a message to be broadcast to all players after the wipe. Leave blank to disable.\n  2.  **Permissions:**\n      * Grant the `SERVER_WIPE` permission to administrators who are authorized to use the wipe command.\n  3.  **In-Game Usage:**\n      * Use the `/wipe` command with the following arguments:\n          * `target`: Specify what to wipe: `all`, `currency`, `teleports`, or `starterkits`.\n          * `confirm`: Set to `true` to confirm the wipe operation. This is required to execute the command.\n      * Examples:\n          * `/wipe all true`: Wipes all data types (respecting the configuration settings).\n          * `/wipe currency true`: Wipes only player currency.\n          * `/wipe teleports true`: Wipes teleport locations and waypoints.\n          * `/wipe starterkits true`: Wipes starter kit claims.\n\n  ## Important Considerations\n\n  * **Data Loss:** Wiping server data is a destructive operation. Ensure you understand the consequences before proceeding.\n  * **Confirmation:** The confirmation argument is essential to prevent accidental wipes. Always double-check your command before executing it.\n  * **Module Dependencies:** This module may interact with other modules (e.g., a teleports module). Ensure those modules are functioning correctly.\n  * **Performance:** Wiping large amounts of data can impact server performance. Plan wipes during off-peak hours if possible.\n  * **Communication:** Use the `globalAnnouncement` feature to inform players about the wipe and any necessary downtime.\n",
            "configSchema": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"type\":\"object\",\"required\":[],\"additionalProperties\":false,\"properties\":{\"wipeCurrency\":{\"title\":\"wipeCurrency\",\"description\":\"Whether to reset all player currency during wipe\",\"default\":false,\"type\":\"boolean\"},\"wipeTeleports\":{\"title\":\"wipeTeleports\",\"description\":\"Whether to delete all teleport locations during wipe.\",\"default\":false,\"type\":\"boolean\"},\"wipeStarterKitClaims\":{\"title\":\"wipeStarterKitClaims\",\"description\":\"wipeStarterKitClaims\",\"default\":false,\"type\":\"boolean\"},\"globalAnnouncement\":{\"title\":\"globalAnnouncement\",\"description\":\"Message to broadcast to all players after the wipe\",\"default\":\"\",\"type\":\"string\"}}}",
            "uiSchema": "{}",
            "commands": [
                {
                    "function": "import { takaro, data, checkPermission, TakaroUserError } from '@takaro/helpers';\n\nasync function main() {\n    const { player, module: mod, gameServerId, arguments: args } = data;\n\n    // Check permissions\n    if (!checkPermission(data.pog, 'SERVER_WIPE')) {\n        throw new TakaroUserError('You do not have permission to wipe server data.');\n    }\n\n    // Check if confirmation is provided\n    if (!args.confirm) {\n        throw new TakaroUserError(`\nThis will wipe server data! To confirm, use one of:\n/wipe all true - Wipe everything (respects config settings)\n/wipe currency true - Wipe only currency\n/wipe teleports true - Wipe all teleports (including waypoints)\n/wipe starterkits true - Wipe only starter kit claims`);\n    }\n\n    // Start the wipe process\n    await player.pm('Server wipe initiated. This might take a moment...');\n\n    const wipeAll = args.target === 'all';\n\n    // 1. Wipe currency if specified and enabled in config\n    if ((wipeAll && mod.userConfig.wipeCurrency) || args.target === 'currency') {\n        try {\n            await player.pm(\"Resetting all player currency...\");\n\n            // First get all PlayerOnGameServer records\n            const pogsResponse = await takaro.playerOnGameserver.playerOnGameServerControllerSearch({\n                filters: {\n                    gameServerId: [gameServerId]\n                },\n                limit: 100\n            });\n\n            const pogs = pogsResponse.data.data;\n\n            if (!pogs || pogs.length === 0) {\n                await player.pm('No players found on this server.');\n                return;\n            }\n\n            // Process players in batches of 10 using Promise.all\n            const batchSize = 10;\n            let resetCount = 0;\n            let errorCount = 0;\n\n            for (let i = 0; i < pogs.length; i += batchSize) {\n                const batch = pogs.slice(i, i + batchSize);\n\n                const results = await Promise.all(\n                    batch.map(pog => {\n                        return takaro.playerOnGameserver.playerOnGameServerControllerSetCurrency(\n                            gameServerId,\n                            pog.playerId,\n                            { currency: 0 }\n                        )\n                            .then(() => ({ success: true }))\n                            .catch(err => ({\n                                success: false,\n                                error: err,\n                                playerId: pog.playerId\n                            }));\n                    })\n                );\n\n                // Count successes and failures\n                results.forEach(result => {\n                    if (result.success) {\n                        resetCount++;\n                    } else {\n                        errorCount++;\n                        console.error(`Failed to reset currency for player ${result.playerId}: ${result.error}`);\n                    }\n                });\n            }\n\n            await player.pm(`Currency reset complete.`);\n\n        } catch (error) {\n            if (error instanceof TakaroUserError) {\n                throw error;\n            }\n            throw new TakaroUserError(`Failed to reset currency: ${error.message}`);\n        }\n    }\n    // 2. Delete teleport AND waypoint variables (treating them as one system)\n    if ((wipeAll && mod.userConfig.wipeTeleports) || args.target === 'teleports') {\n        try {\n            await player.pm(\"Wiping teleports and waypoints data...\");\n\n            let totalDeleted = 0;\n\n            // Find teleports module\n            const teleportsModule = await takaro.module.moduleControllerSearch({\n                filters: {\n                    name: ['teleports']\n                }\n            });\n            const teleportsModuleId = teleportsModule.data.data.length > 0 ? teleportsModule.data.data[0].id : null;\n\n            // Find waypoints module (if it exists as a separate module)\n            const waypointsModule = await takaro.module.moduleControllerSearch({\n                filters: {\n                    name: ['Waypoints']\n                }\n            });\n            const waypointsModuleId = waypointsModule.data.data.length > 0 ? waypointsModule.data.data[0].id : null;\n\n            // Handle teleport variables\n            if (teleportsModuleId) {\n                const teleportVars = await takaro.variable.variableControllerSearch({\n                    filters: {\n                        gameServerId: [gameServerId],\n                        moduleId: [teleportsModuleId]\n                    },\n                    limit: 500\n                });\n\n                // Delete variables in batches\n                const batchSize = 10;\n                for (let i = 0; i < teleportVars.data.data.length; i += batchSize) {\n                    const batch = teleportVars.data.data.slice(i, i + batchSize);\n                    await Promise.all(\n                        batch.map(variable =>\n                            takaro.variable.variableControllerDelete(variable.id)\n                                .then(() => { totalDeleted++; })\n                                .catch(err => console.error(`Failed to delete variable ${variable.id}: ${err.message}`))\n                        )\n                    );\n                }\n            }\n\n            // Handle waypoint variables if they exist as a separate module\n            if (waypointsModuleId) {\n                const waypointVars = await takaro.variable.variableControllerSearch({\n                    filters: {\n                        gameServerId: [gameServerId],\n                        moduleId: [waypointsModuleId]\n                    },\n                    limit: 500\n                });\n\n                // Delete variables in batches\n                const batchSize = 10;\n                for (let i = 0; i < waypointVars.data.data.length; i += batchSize) {\n                    const batch = waypointVars.data.data.slice(i, i + batchSize);\n                    await Promise.all(\n                        batch.map(variable =>\n                            takaro.variable.variableControllerDelete(variable.id)\n                                .then(() => { totalDeleted++; })\n                                .catch(err => console.error(`Failed to delete variable ${variable.id}: ${err.message}`))\n                        )\n                    );\n                }\n            }\n\n            await player.pm(`Deleted ${totalDeleted} teleport and waypoint variables from the server.`);\n        } catch (error) {\n            await player.pm(`Error wiping teleports and waypoints: ${error.message}`);\n        }\n    }\n\n    // 3. Wipe starter kit claims if specified and enabled in config\n    if ((wipeAll && mod.userConfig.wipeStarterKitClaims) || args.target === 'starterkits') {\n        try {\n            await player.pm(\"Resetting all starter kit claims...\");\n\n            // Search for variables with the exact starterkit lock key\n            const starterKitVars = await takaro.variable.variableControllerSearch({\n                filters: {\n                    gameServerId: [gameServerId],\n                    key: ['t_starterkit_lock']\n                }\n            });\n\n            const claimCount = starterKitVars.data.data.length;\n\n            // Delete all found starterkit lock variables\n            for (const variable of starterKitVars.data.data) {\n                await takaro.variable.variableControllerDelete(variable.id);\n            }\n\n            await player.pm(`Starter kit claims reset complete. Reset ${claimCount} claims.`);\n        } catch (error) {\n            throw new TakaroUserError(`Failed to reset starter kit claims: ${error.message}`);\n        }\n    }\n\n\n    // 4. Broadcast the wipe announcement to all players if configured\n    if (mod.userConfig.globalAnnouncement && mod.userConfig.globalAnnouncement.length > 0) {\n        try {\n            await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n                message: mod.userConfig.globalAnnouncement\n            });\n        } catch (error) {\n            await player.pm(`Error sending global announcement: ${error.message}`);\n        }\n    }\n\n    // Confirm completion to the admin\n    await player.pm('Server wipe completed successfully.');\n}\n\nawait main();",
                    "name": "wipe",
                    "trigger": "wipe",
                    "helpText": "Wipe server data according to configuration",
                    "arguments": [
                        {
                            "name": "target",
                            "type": "string",
                            "defaultValue": "all",
                            "helpText": "What to wipe: all, currency, teleports, waypoints, or starterkits",
                            "position": 0
                        },
                        {
                            "name": "confirm",
                            "type": "boolean",
                            "defaultValue": "false",
                            "helpText": "Confirm wipe operation (must be true to execute)",
                            "position": 1
                        }
                    ]
                }
            ],
            "hooks": [],
            "cronJobs": [],
            "functions": [],
            "permissions": [
                {
                    "canHaveCount": false,
                    "description": "Permission to wipe server",
                    "permission": "SERVER_WIPE",
                    "friendlyName": "SERVER_WIPE"
                }
            ]
        },
        {
            "tag": "latest",
  "description": "The ServerWipe module provides administrators with a powerful tool to reset server data. It allows selective wiping of player currency, teleport locations, and starter kit claims with a single command.\n\n  ## Key Functionality\n\n  * **Selective Data Wipe:** Administrators can choose to wipe specific types of data:\n      * Player currency\n      * Teleport locations and waypoints\n      * Starter kit claims\n  * **Confirmation Requirement:** The wipe command requires explicit confirmation to prevent accidental data loss.\n  * **Global Announcement:** The module can broadcast a customizable message to all players after the wipe is complete.\n  * **Batch Processing:** For large numbers of players or data entries, the module uses batch processing to improve performance and prevent server overload.\n  * **Error Handling:** The module includes error handling to gracefully manage potential issues during the wipe process and provide informative messages to administrators.\n\n  ## How to Use\n\n  1.  **Configuration:**\n      * `wipeCurrency`: Set to `true` to enable wiping player currency. Default: `false`.\n      * `wipeTeleports`: Set to `true` to enable wiping teleport locations and waypoints. Default: `false`.\n      * `wipeStarterKitClaims`: Set to `true` to enable wiping starter kit claims. Default: `false`.\n      * `globalAnnouncement`: Enter a message to be broadcast to all players after the wipe. Leave blank to disable.\n  2.  **Permissions:**\n      * Grant the `SERVER_WIPE` permission to administrators who are authorized to use the wipe command.\n  3.  **In-Game Usage:**\n      * Use the `/wipe` command with the following arguments:\n          * `target`: Specify what to wipe: `all`, `currency`, `teleports`, or `starterkits`.\n          * `confirm`: Set to `true` to confirm the wipe operation. This is required to execute the command.\n      * Examples:\n          * `/wipe all true`: Wipes all data types (respecting the configuration settings).\n          * `/wipe currency true`: Wipes only player currency.\n          * `/wipe teleports true`: Wipes teleport locations and waypoints.\n          * `/wipe starterkits true`: Wipes starter kit claims.\n\n  ## Important Considerations\n\n  * **Data Loss:** Wiping server data is a destructive operation. Ensure you understand the consequences before proceeding.\n  * **Confirmation:** The confirmation argument is essential to prevent accidental wipes. Always double-check your command before executing it.\n  * **Module Dependencies:** This module may interact with other modules (e.g., a teleports module). Ensure those modules are functioning correctly.\n  * **Performance:** Wiping large amounts of data can impact server performance. Plan wipes during off-peak hours if possible.\n  * **Communication:** Use the `globalAnnouncement` feature to inform players about the wipe and any necessary downtime.\n",
            "configSchema": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"type\":\"object\",\"required\":[],\"additionalProperties\":false,\"properties\":{\"wipeCurrency\":{\"title\":\"wipeCurrency\",\"description\":\"Whether to reset all player currency during wipe\",\"default\":false,\"type\":\"boolean\"},\"wipeTeleports\":{\"title\":\"wipeTeleports\",\"description\":\"Whether to delete all teleport locations during wipe.\",\"default\":false,\"type\":\"boolean\"},\"wipeStarterKitClaims\":{\"title\":\"wipeStarterKitClaims\",\"description\":\"wipeStarterKitClaims\",\"default\":false,\"type\":\"boolean\"},\"globalAnnouncement\":{\"title\":\"globalAnnouncement\",\"description\":\"Message to broadcast to all players after the wipe\",\"default\":\"\",\"type\":\"string\"}}}",
            "uiSchema": "{}",
            "commands": [
                {
                    "function": "import { takaro, data, checkPermission, TakaroUserError } from '@takaro/helpers';\n\nasync function main() {\n    const { player, module: mod, gameServerId, arguments: args } = data;\n\n    // Check permissions\n    if (!checkPermission(data.pog, 'SERVER_WIPE')) {\n        throw new TakaroUserError('You do not have permission to wipe server data.');\n    }\n\n    // Check if confirmation is provided\n    if (!args.confirm) {\n        throw new TakaroUserError(`\nThis will wipe server data! To confirm, use one of:\n/wipe all true - Wipe everything (respects config settings)\n/wipe currency true - Wipe only currency\n/wipe teleports true - Wipe all teleports (including waypoints)\n/wipe starterkits true - Wipe only starter kit claims`);\n    }\n\n    // Start the wipe process\n    await player.pm('Server wipe initiated. This might take a moment...');\n\n    const wipeAll = args.target === 'all';\n\n    // 1. Wipe currency if specified and enabled in config\n    if ((wipeAll && mod.userConfig.wipeCurrency) || args.target === 'currency') {\n        try {\n            await player.pm(\"Resetting all player currency...\");\n\n            // First get all PlayerOnGameServer records\n            const pogsResponse = await takaro.playerOnGameserver.playerOnGameServerControllerSearch({\n                filters: {\n                    gameServerId: [gameServerId]\n                },\n                limit: 100\n            });\n\n            const pogs = pogsResponse.data.data;\n\n            if (!pogs || pogs.length === 0) {\n                await player.pm('No players found on this server.');\n                return;\n            }\n\n            // Process players in batches of 10 using Promise.all\n            const batchSize = 10;\n            let resetCount = 0;\n            let errorCount = 0;\n\n            for (let i = 0; i < pogs.length; i += batchSize) {\n                const batch = pogs.slice(i, i + batchSize);\n\n                const results = await Promise.all(\n                    batch.map(pog => {\n                        return takaro.playerOnGameserver.playerOnGameServerControllerSetCurrency(\n                            gameServerId,\n                            pog.playerId,\n                            { currency: 0 }\n                        )\n                            .then(() => ({ success: true }))\n                            .catch(err => ({\n                                success: false,\n                                error: err,\n                                playerId: pog.playerId\n                            }));\n                    })\n                );\n\n                // Count successes and failures\n                results.forEach(result => {\n                    if (result.success) {\n                        resetCount++;\n                    } else {\n                        errorCount++;\n                        console.error(`Failed to reset currency for player ${result.playerId}: ${result.error}`);\n                    }\n                });\n            }\n\n            await player.pm(`Currency reset complete.`);\n\n        } catch (error) {\n            if (error instanceof TakaroUserError) {\n                throw error;\n            }\n            throw new TakaroUserError(`Failed to reset currency: ${error.message}`);\n        }\n    }\n    // 2. Delete teleport AND waypoint variables (treating them as one system)\n    if ((wipeAll && mod.userConfig.wipeTeleports) || args.target === 'teleports') {\n        try {\n            await player.pm(\"Wiping teleports and waypoints data...\");\n\n            let totalDeleted = 0;\n\n            // Find teleports module\n            const teleportsModule = await takaro.module.moduleControllerSearch({\n                filters: {\n                    name: ['teleports']\n                }\n            });\n            const teleportsModuleId = teleportsModule.data.data.length > 0 ? teleportsModule.data.data[0].id : null;\n\n            // Find waypoints module (if it exists as a separate module)\n            const waypointsModule = await takaro.module.moduleControllerSearch({\n                filters: {\n                    name: ['Waypoints']\n                }\n            });\n            const waypointsModuleId = waypointsModule.data.data.length > 0 ? waypointsModule.data.data[0].id : null;\n\n            // Handle teleport variables\n            if (teleportsModuleId) {\n                const teleportVars = await takaro.variable.variableControllerSearch({\n                    filters: {\n                        gameServerId: [gameServerId],\n                        moduleId: [teleportsModuleId]\n                    },\n                    limit: 500\n                });\n\n                // Delete variables in batches\n                const batchSize = 10;\n                for (let i = 0; i < teleportVars.data.data.length; i += batchSize) {\n                    const batch = teleportVars.data.data.slice(i, i + batchSize);\n                    await Promise.all(\n                        batch.map(variable =>\n                            takaro.variable.variableControllerDelete(variable.id)\n                                .then(() => { totalDeleted++; })\n                                .catch(err => console.error(`Failed to delete variable ${variable.id}: ${err.message}`))\n                        )\n                    );\n                }\n            }\n\n            // Handle waypoint variables if they exist as a separate module\n            if (waypointsModuleId) {\n                const waypointVars = await takaro.variable.variableControllerSearch({\n                    filters: {\n                        gameServerId: [gameServerId],\n                        moduleId: [waypointsModuleId]\n                    },\n                    limit: 500\n                });\n\n                // Delete variables in batches\n                const batchSize = 10;\n                for (let i = 0; i < waypointVars.data.data.length; i += batchSize) {\n                    const batch = waypointVars.data.data.slice(i, i + batchSize);\n                    await Promise.all(\n                        batch.map(variable =>\n                            takaro.variable.variableControllerDelete(variable.id)\n                                .then(() => { totalDeleted++; })\n                                .catch(err => console.error(`Failed to delete variable ${variable.id}: ${err.message}`))\n                        )\n                    );\n                }\n            }\n\n            await player.pm(`Deleted ${totalDeleted} teleport and waypoint variables from the server.`);\n        } catch (error) {\n            await player.pm(`Error wiping teleports and waypoints: ${error.message}`);\n        }\n    }\n\n    // 3. Wipe starter kit claims if specified and enabled in config\n    if ((wipeAll && mod.userConfig.wipeStarterKitClaims) || args.target === 'starterkits') {\n        try {\n            await player.pm(\"Resetting all starter kit claims...\");\n\n            // Search for variables with the exact starterkit lock key\n            const starterKitVars = await takaro.variable.variableControllerSearch({\n                filters: {\n                    gameServerId: [gameServerId],\n                    key: ['t_starterkit_lock']\n                }\n            });\n\n            const claimCount = starterKitVars.data.data.length;\n\n            // Delete all found starterkit lock variables\n            for (const variable of starterKitVars.data.data) {\n                await takaro.variable.variableControllerDelete(variable.id);\n            }\n\n            await player.pm(`Starter kit claims reset complete. Reset ${claimCount} claims.`);\n        } catch (error) {\n            throw new TakaroUserError(`Failed to reset starter kit claims: ${error.message}`);\n        }\n    }\n\n\n    // 4. Broadcast the wipe announcement to all players if configured\n    if (mod.userConfig.globalAnnouncement && mod.userConfig.globalAnnouncement.length > 0) {\n        try {\n            await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n                message: mod.userConfig.globalAnnouncement\n            });\n        } catch (error) {\n            await player.pm(`Error sending global announcement: ${error.message}`);\n        }\n    }\n\n    // Confirm completion to the admin\n    await player.pm('Server wipe completed successfully.');\n}\n\nawait main();",
                    "name": "wipe",
                    "trigger": "wipe",
                    "helpText": "Wipe server data according to configuration",
                    "arguments": [
                        {
                            "name": "target",
                            "type": "string",
                            "defaultValue": "all",
                            "helpText": "What to wipe: all, currency, teleports, waypoints, or starterkits",
                            "position": 0
                        },
                        {
                            "name": "confirm",
                            "type": "boolean",
                            "defaultValue": "false",
                            "helpText": "Confirm wipe operation (must be true to execute)",
                            "position": 1
                        }
                    ]
                }
            ],
            "hooks": [],
            "cronJobs": [],
            "functions": [],
            "permissions": [
                {
                    "canHaveCount": false,
                    "description": "Permission to wipe server",
                    "permission": "SERVER_WIPE",
                    "friendlyName": "SERVER_WIPE"
                }
            ]
        }
    ],
    "takaroVersion": "main"
}