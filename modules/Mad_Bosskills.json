{
    "name": "Mad_Bosskills",
    "versions": [
        {
            "tag": "latest",
            "description": "Pay and Announcement for Bosses",
            "configSchema": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"type\":\"object\",\"required\":[\"coinAmountMiniBoss\"],\"additionalProperties\":false,\"properties\":{\"coinAmountMiniBoss\":{\"title\":\"coinAmountMiniBoss\",\"description\":\"Amount of Coin to award for a miniboss\",\"default\":0,\"type\":\"number\"},\"coinAmountBoss\":{\"title\":\"coinAmountBoss\",\"description\":\"Amount of Coin to award for a Boss\",\"default\":0,\"type\":\"number\"},\"announceDevourer\":{\"title\":\"announceDevourer\",\"description\":\"Use {pname} for player name and {amount} for currency\",\"type\":\"string\"},\"announceGargul\":{\"title\":\"announceGargul\",\"description\":\"Use {pname} for player name and {amount} for currency\",\"type\":\"string\"},\"announceBear\":{\"title\":\"announceBear\",\"description\":\"Use {pname} for player name and {amount} for currency\",\"type\":\"string\"},\"announceBitch\":{\"title\":\"announceBitch\",\"description\":\"Use {pname} for player name and {amount} for currency\",\"type\":\"string\"},\"announceBurningFlesh\":{\"title\":\"announceBurningFlesh\",\"description\":\"Use {pname} for player name and {amount} for currency\",\"type\":\"string\"},\"announceCholera\":{\"title\":\"announceCholera\",\"description\":\"Use {pname} for player name and {amount} for currency\",\"type\":\"string\"},\"announceBull\":{\"title\":\"announceBull\",\"description\":\"Use {pname} for player name and {amount} for currency\",\"default\":\"\",\"type\":\"string\"},\"announceShocker\":{\"title\":\"announceShocker\",\"description\":\"Use {pname} for player name and {amount} for currency\",\"type\":\"string\"},\"coinAmountTinyBoss\":{\"title\":\"coinAmountTinyBoss\",\"description\":\"Amount of Coin to award for a tinyboss\",\"default\":0,\"type\":\"number\"},\"announceVeteran\":{\"title\":\"announceVeteran\",\"description\":\"Use {pname} for player name and {amount} for currency\",\"type\":\"string\"},\"announceCarrier\":{\"title\":\"announceCarrier\",\"description\":\"Use {pname} for player name and {amount} for currency\",\"type\":\"string\"},\"announceOstiarius\":{\"title\":\"announceOstiarius\",\"description\":\"Use {pname} for player name and {amount} for currency\",\"type\":\"string\"}}}",
            "uiSchema": "{}",
            "commands": [],
            "hooks": [
                {
                    "function": "import { data, takaro } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, eventData } = data;\n\n    const namePattern = /entityKilled: (\\w+) \\(Steam_/;\n    const nameMatch = eventData.msg.match(namePattern);\n    const amountx = data.module.userConfig.coinAmountBoss;\n    const message = data.module.userConfig.announceBull;\n    const playerName = nameMatch ? nameMatch[1] : \"Unknown\";\n    const formattedMessage = message\n        .replace('{pname}', playerName)\n        .replace('{amount}', amountx);\n\n\n    const pattern = /Steam_(\\d+)/;\n    const match = data.eventData.msg.match(pattern);\n    const steamIdx = match[1];\n    const playerid = (await takaro.player.playerControllerSearch({ filters: { steamId: [steamIdx] } })).data.data[0].id;\n\n    // Send the message with backticks\n    await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n        message: formattedMessage\n    });\n\n    // Grant currency to the player\n    await takaro.playerOnGameserver.playerOnGameServerControllerAddCurrency(gameServerId, playerid, {\n        currency: amountx\n    });\n}\n\nawait main();",
                    "name": "Bull",
                    "description": "Announce Bull Kill",
                    "eventType": "entity-killed",
                    "regex": "\\bEntity bossBull\\b"
                },
                {
                    "function": "import { data, takaro } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, eventData } = data;\n\n    const namePattern = /entityKilled: (\\w+) \\(Steam_/;\n    const nameMatch = eventData.msg.match(namePattern);\n    const amountx = data.module.userConfig.coinAmountBoss;\n    const message = data.module.userConfig.announceShocker;\n    const playerName = nameMatch ? nameMatch[1] : \"Unknown\";\n    const formattedMessage = message\n        .replace('{pname}', playerName)\n        .replace('{amount}', amountx);\n\n\n    const pattern = /Steam_(\\d+)/;\n    const match = data.eventData.msg.match(pattern);\n    const steamIdx = match[1];\n    const playerid = (await takaro.player.playerControllerSearch({ filters: { steamId: [steamIdx] } })).data.data[0].id;\n\n    // Send the message with backticks\n    await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n        message: formattedMessage\n    });\n\n    // Grant currency to the player\n    await takaro.playerOnGameserver.playerOnGameServerControllerAddCurrency(gameServerId, playerid, {\n        currency: amountx\n    });\n}\n\nawait main();",
                    "name": "Shocker",
                    "description": "Kill Boss Shocker",
                    "eventType": "entity-killed",
                    "regex": "\\bEntity bossShocker\\b"
                },
                {
                    "function": "import { data, takaro, TakaroUserError } from '@takaro/helpers'; // Added TakaroUserError\n\nasync function main() {\n    const { gameServerId, player, module: mod } = data; // Added mod for userConfig access\n\n    // Check if player data is available (important for hooks)\n    if (!player || !player.id) {\n        console.log('Error: Player data is missing in the hook context.');\n        // Depending on the hook, you might want to just return or handle differently\n        return;\n    }\n\n    // Use your original userConfig variable names\n    const rawAmount = mod.userConfig?.coinAmountTinyBoss; // Use optional chaining\n    const messageTemplate = mod.userConfig?.announceBitch; // Use optional chaining\n\n    // --- Validate and Convert Currency Amount ---\n    if (rawAmount === undefined || rawAmount === null) {\n        console.log('Error: coinAmountTinyBoss is not configured.');\n        // Handle missing configuration - maybe throw an error or return\n        throw new TakaroUserError('Currency amount (coinAmountTinyBoss) is not configured in the module.');\n    }\n\n    const amountx = Number(rawAmount); // Convert to number\n\n    // Check if conversion was successful and it's a valid number\n    if (isNaN(amountx) || !isFinite(amountx)) {\n        console.log(`Error: Invalid configuration for coinAmountTinyBoss. Expected a number, got: ${rawAmount}`);\n        throw new TakaroUserError(`Invalid configuration for currency amount: ${rawAmount}`);\n    }\n    // --- End Validation ---\n\n    // Check if message template is configured\n    if (typeof messageTemplate !== 'string' || messageTemplate.trim() === '') {\n        console.log('Warning: announceBitch message template is not configured or is empty.');\n        // Decide how to handle - maybe use a default message or skip announcement\n        // For now, let's skip if empty\n        if (typeof messageTemplate !== 'string') return; // Stop if not configured at all\n    }\n\n\n    // Format the message using the player's name directly from the hook data\n    // Only format if the template exists\n    let formattedMessage = \"\";\n    if (messageTemplate) {\n        formattedMessage = messageTemplate\n            .replace('{pname}', `${player.name}`)\n            .replace('{amount}', amountx.toString()); // Use the number amount here\n\n        // Send the announcement message to all players\n        await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n            message: formattedMessage\n        });\n    }\n\n\n    // Award currency to the player directly using the player ID from hook data\n    // Ensure amount is positive if required by your logic\n    if (amountx > 0) { // Optional: only award positive amounts\n        await takaro.playerOnGameserver.playerOnGameServerControllerAddCurrency(\n            gameServerId,\n            player.id,\n            {\n                currency: amountx // Pass the number variable\n            }\n        );\n        console.log(`Awarded ${amountx} currency to ${player.name}`);\n    } else {\n        console.log(`Skipping currency award for ${player.name} because amount is not positive (${amountx}).`);\n    }\n}\n\nawait main();",
                    "name": "Bitch",
                    "description": "Boss Bitch Kill",
                    "eventType": "entity-killed",
                    "regex": "\\bEntity bossBitch\\b"
                },
                {
                    "function": "import { data, takaro } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, player } = data;\n\n    // Use your original userConfig variable names\n    const amountx = data.module.userConfig.coinAmountMiniBoss;\n    const message = data.module.userConfig.announceDevourer;\n\n    // Format the message using the player's name directly from the hook data\n    const formattedMessage = message\n        .replace('{pname}', `${player.name}`)\n        .replace('{amount}', amountx);\n\n    // Send the announcement message to all players\n    await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n        message: formattedMessage\n    });\n\n    // Award currency to the player directly using the player ID from hook data\n    await takaro.playerOnGameserver.playerOnGameServerControllerAddCurrency(\n        gameServerId,\n        player.id,\n        {\n            currency: amountx\n        }\n    );\n}\n\nawait main();",
                    "name": "Devourer",
                    "description": "Boss Devourer Kill",
                    "eventType": "entity-killed",
                    "regex": "\\bEntity bossDevourer\\b"
                },
                {
                    "function": "import { data, takaro } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, eventData } = data;\n\n    const namePattern = /entityKilled: (\\w+) \\(Steam_/;\n    const nameMatch = eventData.msg.match(namePattern);\n    const amountx = data.module.userConfig.coinAmountMiniBoss;\n    const message = data.module.userConfig.announceGargul;\n    const playerName = nameMatch ? nameMatch[1] : \"Unknown\";\n    const formattedMessage = message\n        .replace('{pname}', playerName)\n        .replace('{amount}', amountx);\n\n\n    const pattern = /Steam_(\\d+)/;\n    const match = data.eventData.msg.match(pattern);\n    const steamIdx = match[1];\n    const playerid = (await takaro.player.playerControllerSearch({ filters: { steamId: [steamIdx] } })).data.data[0].id;\n\n    // Send the message with backticks\n    await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n        message: formattedMessage\n    });\n\n    // Grant currency to the player\n    await takaro.playerOnGameserver.playerOnGameServerControllerAddCurrency(gameServerId, playerid, {\n        currency: amountx\n    });\n}\n\nawait main();",
                    "name": "Gargul",
                    "description": "Boss Gargul Kill",
                    "eventType": "entity-killed",
                    "regex": "\\bEntity bossGargul\\b"
                },
                {
                    "function": "import { data, takaro } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, eventData } = data;\n\n    const namePattern = /entityKilled: (\\w+) \\(Steam_/;\n    const nameMatch = eventData.msg.match(namePattern);\n    const amountx = data.module.userConfig.coinAmountBoss;\n    const message = data.module.userConfig.announceVeteran;\n    const playerName = nameMatch ? nameMatch[1] : \"Unknown\";\n    const formattedMessage = message\n        .replace('{pname}', playerName)\n        .replace('{amount}', amountx);\n\n\n    const pattern = /Steam_(\\d+)/;\n    const match = data.eventData.msg.match(pattern);\n    const steamIdx = match[1];\n    const playerid = (await takaro.player.playerControllerSearch({ filters: { steamId: [steamIdx] } })).data.data[0].id;\n\n    // Send the message with backticks\n    await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n        message: formattedMessage\n    });\n\n    // Grant currency to the player\n    await takaro.playerOnGameserver.playerOnGameServerControllerAddCurrency(gameServerId, playerid, {\n        currency: amountx\n    });\n}\n\nawait main();",
                    "name": "Veteran",
                    "description": "Kill Boss Veteran",
                    "eventType": "entity-killed",
                    "regex": "\\bEntity bossVeteran\\b"
                },
                {
                    "function": "import { data, takaro, TakaroUserError } from '@takaro/helpers'; // Added TakaroUserError\n\nasync function main() {\n    const { gameServerId, player, module: mod } = data; // Added mod for userConfig access\n\n    // Check if player data is available (important for hooks)\n    if (!player || !player.id) {\n        console.log('Error: Player data is missing in the hook context.');\n        // Depending on the hook, you might want to just return or handle differently\n        return;\n    }\n\n    // Use your original userConfig variable names\n    const rawAmount = mod.userConfig?.coinAmountTinyBoss; // Use optional chaining\n    const messageTemplate = mod.userConfig?.announceBurningFlesh; // Use optional chaining\n\n    // --- Validate and Convert Currency Amount ---\n    if (rawAmount === undefined || rawAmount === null) {\n        console.log('Error: coinAmountTinyBoss is not configured.');\n        // Handle missing configuration - maybe throw an error or return\n        throw new TakaroUserError('Currency amount (coinAmountTinyBoss) is not configured in the module.');\n    }\n\n    const amountx = Number(rawAmount); // Convert to number\n\n    // Check if conversion was successful and it's a valid number\n    if (isNaN(amountx) || !isFinite(amountx)) {\n        console.log(`Error: Invalid configuration for coinAmountTinyBoss. Expected a number, got: ${rawAmount}`);\n        throw new TakaroUserError(`Invalid configuration for currency amount: ${rawAmount}`);\n    }\n    // --- End Validation ---\n\n    // Check if message template is configured\n    if (typeof messageTemplate !== 'string' || messageTemplate.trim() === '') {\n        console.log('Warning: announceBitch message template is not configured or is empty.');\n        // Decide how to handle - maybe use a default message or skip announcement\n        // For now, let's skip if empty\n        if (typeof messageTemplate !== 'string') return; // Stop if not configured at all\n    }\n\n\n    // Format the message using the player's name directly from the hook data\n    // Only format if the template exists\n    let formattedMessage = \"\";\n    if (messageTemplate) {\n        formattedMessage = messageTemplate\n            .replace('{pname}', `${player.name}`)\n            .replace('{amount}', amountx.toString()); // Use the number amount here\n\n        // Send the announcement message to all players\n        await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n            message: formattedMessage\n        });\n    }\n\n\n    // Award currency to the player directly using the player ID from hook data\n    // Ensure amount is positive if required by your logic\n    if (amountx > 0) { // Optional: only award positive amounts\n        await takaro.playerOnGameserver.playerOnGameServerControllerAddCurrency(\n            gameServerId,\n            player.id,\n            {\n                currency: amountx // Pass the number variable\n            }\n        );\n        console.log(`Awarded ${amountx} currency to ${player.name}`);\n    } else {\n        console.log(`Skipping currency award for ${player.name} because amount is not positive (${amountx}).`);\n    }\n}\n\nawait main();",
                    "name": "BurningFlesh",
                    "description": "Burning Flesh Kill",
                    "eventType": "entity-killed",
                    "regex": "\\bEntity bossBurningFlesh\\b"
                },
                {
                    "function": "import { data, takaro } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, eventData } = data;\n\n    const namePattern = /entityKilled: (\\w+) \\(Steam_/;\n    const nameMatch = eventData.msg.match(namePattern);\n    const amountx = data.module.userConfig.coinAmountMiniBoss;\n    const message = data.module.userConfig.announceBear;\n    const playerName = nameMatch ? nameMatch[1] : \"Unknown\";\n    const formattedMessage = message\n        .replace('{pname}', playerName)\n        .replace('{amount}', amountx);\n\n\n    const pattern = /Steam_(\\d+)/;\n    const match = data.eventData.msg.match(pattern);\n    const steamIdx = match[1];\n    const playerid = (await takaro.player.playerControllerSearch({ filters: { steamId: [steamIdx] } })).data.data[0].id;\n\n    // Send the message with backticks\n    await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n        message: formattedMessage\n    });\n\n    // Grant currency to the player\n    await takaro.playerOnGameserver.playerOnGameServerControllerAddCurrency(gameServerId, playerid, {\n        currency: amountx\n    });\n}\n\nawait main();",
                    "name": "Bear",
                    "description": "Boss Bear Kill",
                    "eventType": "entity-killed",
                    "regex": "\\bEntity bossBearDaddy\\b"
                },
                {
                    "function": "import { data, takaro } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, eventData } = data;\n\n    const namePattern = /entityKilled: (\\w+) \\(Steam_/;\n    const nameMatch = eventData.msg.match(namePattern);\n    const amountx = data.module.userConfig.coinAmountBoss;\n    const message = data.module.userConfig.announceCarrier;\n    const playerName = nameMatch ? nameMatch[1] : \"Unknown\";\n    const formattedMessage = message\n        .replace('{pname}', playerName)\n        .replace('{amount}', amountx);\n\n\n    const pattern = /Steam_(\\d+)/;\n    const match = data.eventData.msg.match(pattern);\n    const steamIdx = match[1];\n    const playerid = (await takaro.player.playerControllerSearch({ filters: { steamId: [steamIdx] } })).data.data[0].id;\n\n    // Send the message with backticks\n    await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n        message: formattedMessage\n    });\n\n    // Grant currency to the player\n    await takaro.playerOnGameserver.playerOnGameServerControllerAddCurrency(gameServerId, playerid, {\n        currency: amountx\n    });\n}\n\nawait main();",
                    "name": "Carrier",
                    "description": "Kill Boss Carrier",
                    "eventType": "entity-killed",
                    "regex": "\\bEntity bossCarrier\\b"
                },
                {
                    "function": "import { data, takaro, TakaroUserError } from '@takaro/helpers'; // Added TakaroUserError\n\nasync function main() {\n    const { gameServerId, player, module: mod } = data; // Added mod for userConfig access\n\n    // Check if player data is available (important for hooks)\n    if (!player || !player.id) {\n        console.log('Error: Player data is missing in the hook context.');\n        // Depending on the hook, you might want to just return or handle differently\n        return;\n    }\n\n    // Use your original userConfig variable names\n    const rawAmount = mod.userConfig?.coinAmountTinyBoss; // Use optional chaining\n    const messageTemplate = mod.userConfig?.announceCholera; // Use optional chaining\n\n    // --- Validate and Convert Currency Amount ---\n    if (rawAmount === undefined || rawAmount === null) {\n        console.log('Error: coinAmountTinyBoss is not configured.');\n        // Handle missing configuration - maybe throw an error or return\n        throw new TakaroUserError('Currency amount (coinAmountTinyBoss) is not configured in the module.');\n    }\n\n    const amountx = Number(rawAmount); // Convert to number\n\n    // Check if conversion was successful and it's a valid number\n    if (isNaN(amountx) || !isFinite(amountx)) {\n        console.log(`Error: Invalid configuration for coinAmountTinyBoss. Expected a number, got: ${rawAmount}`);\n        throw new TakaroUserError(`Invalid configuration for currency amount: ${rawAmount}`);\n    }\n    // --- End Validation ---\n\n    // Check if message template is configured\n    if (typeof messageTemplate !== 'string' || messageTemplate.trim() === '') {\n        console.log('Warning: announceBitch message template is not configured or is empty.');\n        // Decide how to handle - maybe use a default message or skip announcement\n        // For now, let's skip if empty\n        if (typeof messageTemplate !== 'string') return; // Stop if not configured at all\n    }\n\n\n    // Format the message using the player's name directly from the hook data\n    // Only format if the template exists\n    let formattedMessage = \"\";\n    if (messageTemplate) {\n        formattedMessage = messageTemplate\n            .replace('{pname}', `${player.name}`)\n            .replace('{amount}', amountx.toString()); // Use the number amount here\n\n        // Send the announcement message to all players\n        await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n            message: formattedMessage\n        });\n    }\n\n\n    // Award currency to the player directly using the player ID from hook data\n    // Ensure amount is positive if required by your logic\n    if (amountx > 0) { // Optional: only award positive amounts\n        await takaro.playerOnGameserver.playerOnGameServerControllerAddCurrency(\n            gameServerId,\n            player.id,\n            {\n                currency: amountx // Pass the number variable\n            }\n        );\n        console.log(`Awarded ${amountx} currency to ${player.name}`);\n    } else {\n        console.log(`Skipping currency award for ${player.name} because amount is not positive (${amountx}).`);\n    }\n}\n\nawait main();",
                    "name": "Cholera",
                    "description": "Announce Cholera Kill",
                    "eventType": "entity-killed",
                    "regex": "\\bEntity bossCholera\\b"
                },
                {
                    "function": "import { data, takaro } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, eventData } = data;\n\n    const namePattern = /entityKilled: (\\w+) \\(Steam_/;\n    const nameMatch = eventData.msg.match(namePattern);\n    const amountx = data.module.userConfig.coinAmountBoss;\n    const message = data.module.userConfig.announceOstiarius;\n    const playerName = nameMatch ? nameMatch[1] : \"Unknown\";\n    const formattedMessage = message\n        .replace('{pname}', playerName)\n        .replace('{amount}', amountx);\n\n\n    const pattern = /Steam_(\\d+)/;\n    const match = data.eventData.msg.match(pattern);\n    const steamIdx = match[1];\n    const playerid = (await takaro.player.playerControllerSearch({ filters: { steamId: [steamIdx] } })).data.data[0].id;\n\n    // Send the message with backticks\n    await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n        message: formattedMessage\n    });\n\n    // Grant currency to the player\n    await takaro.playerOnGameserver.playerOnGameServerControllerAddCurrency(gameServerId, playerid, {\n        currency: amountx\n    });\n}\n\nawait main();",
                    "name": "Ostiarius",
                    "description": "Kill Boss Ostiarius",
                    "eventType": "entity-killed",
                    "regex": "\\bEntity Ostiarius\\b"
                }
            ],
            "cronJobs": [],
            "functions": [],
            "permissions": []
        }
    ],
    "takaroVersion": "v0.2.1"
}