{
    "name": "limon_PvPmessages",
    "versions": [
        {
            "tag": "latest",
            "description": "send PvP messages to players",
            "configSchema": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"type\":\"object\",\"properties\":{\"insultsWithKiller\":{\"type\":\"array\",\"title\":\"Insults (Player vs Player)\",\"description\":\"List of insult messages when a player kills another player. Use {victim}, {killer}, and {weapon} as placeholders.\",\"items\":{\"type\":\"string\"},\"default\":[\"{killer} just sent {victim} to the shadow realm with a {weapon}!\",\"{victim} got absolutely demolished by {killer}'s {weapon}!\",\"{killer} turned {victim} into swiss cheese using a {weapon}!\",\"{victim} learned the hard way that {killer}'s {weapon} bites!\",\"{killer} gave {victim} a one-way ticket to respawn town with their {weapon}!\",\"{victim} got schooled by {killer} and their trusty {weapon}!\",\"{killer} introduced {victim} to their little friend called {weapon}!\",\"RIP {victim} - courtesy of {killer}'s {weapon}!\",\"{victim} just got a free anatomy lesson from Dr. {killer} and their {weapon}!\",\"{killer} turned {victim} into target practice with that {weapon}!\"]},\"insultsEnvironmental\":{\"type\":\"array\",\"title\":\"Insults (Environmental Deaths)\",\"description\":\"List of insult messages when a player dies to environment/NPCs. Use {victim} and {weapon} as placeholders.\",\"items\":{\"type\":\"string\"},\"default\":[\"{victim} couldn't handle what {weapon} had to offer!\",\"{victim} became one with nature thanks to {weapon}!\",\"{victim} learned that {weapon} doesn't play favorites!\",\"Mother Nature just claimed {victim} via {weapon}!\",\"{victim} got a harsh reality check from {weapon}!\",\"{weapon} just added {victim} to its kill count!\",\"{victim} found out the hard way that {weapon} is not their friend!\",\"Darwin would be proud - {victim} got naturally selected by {weapon}!\"]},\"displayToAll\":{\"title\":\"Display to All Players\",\"type\":\"boolean\",\"description\":\"If true, messages are sent to all players. If false, only sent to victim and killer.\",\"default\":true},\"cooldownSeconds\":{\"title\":\"Cooldown (seconds)\",\"type\":\"number\",\"description\":\"Minimum seconds between death insult messages to prevent spam.\",\"default\":2,\"minimum\":0,\"maximum\":60}},\"additionalProperties\":false}",
            "uiSchema": "{\"cooldownSeconds\":{\"ui:widget\":\"range\"},\"displayToAll\":{\"ui:help\":\"When disabled, only the victim and killer see the message\"}}",
            "commands": [],
            "hooks": [
                {
                    "function": "import { takaro, data } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, module: mod } = data;\n    const { victim, killer, weapon } = data.eventData;\n\n    // Cooldown check to prevent spam\n    if (mod.userConfig.cooldownSeconds > 0) {\n        const cooldownKey = 'death_insult_cooldown';\n        const lastMessageTime = await takaro.variable.variableControllerSearch({\n            filters: {\n                key: [cooldownKey],\n                gameServerId: [gameServerId],\n                moduleId: [mod.moduleId],\n            },\n        });\n\n        const now = Date.now();\n        if (lastMessageTime.data.data.length > 0) {\n            const lastTime = parseInt(lastMessageTime.data.data[0].value);\n            const timeSinceLastMessage = (now - lastTime) / 1000;\n\n            if (timeSinceLastMessage < mod.userConfig.cooldownSeconds) {\n                return; // Still in cooldown\n            }\n\n            // Update existing cooldown variable\n            await takaro.variable.variableControllerUpdate(lastMessageTime.data.data[0].id, {\n                value: now.toString(),\n            });\n        } else {\n            // Create new cooldown variable\n            await takaro.variable.variableControllerCreate({\n                key: cooldownKey,\n                value: now.toString(),\n                gameServerId,\n                moduleId: mod.moduleId,\n            });\n        }\n    }\n\n    let insultMessage = '';\n    let victimName = victim?.name || 'Unknown Player';\n    let killerName = killer?.name || null;\n    let weaponName = weapon || 'unknown means';\n\n    // Choose appropriate insult based on whether there's a killer\n    if (killerName && killerName !== victimName) {\n        // Player vs Player kill\n        const insults = mod.userConfig.insultsWithKiller;\n        const randomInsult = insults[Math.floor(Math.random() * insults.length)];\n\n        insultMessage = randomInsult\n            .replace(/{victim}/g, victimName)\n            .replace(/{killer}/g, killerName)\n            .replace(/{weapon}/g, weaponName);\n    } else {\n        // Environmental death (or suicide)\n        const insults = mod.userConfig.insultsEnvironmental;\n        const randomInsult = insults[Math.floor(Math.random() * insults.length)];\n\n        insultMessage = randomInsult\n            .replace(/{victim}/g, victimName)\n            .replace(/{weapon}/g, weaponName);\n    }\n\n    // Send message based on configuration\n    if (mod.userConfig.displayToAll) {\n        // Send to all players\n        await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n            message: insultMessage,\n        });\n    } else {\n        // Send only to victim and killer (if exists)\n        if (victim) {\n            await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n                message: insultMessage,\n                opts: {\n                    recipient: {\n                        gameId: victim.gameId,\n                    },\n                },\n            });\n        }\n\n        if (killer && killer.gameId !== victim?.gameId) {\n            await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n                message: insultMessage,\n                opts: {\n                    recipient: {\n                        gameId: killer.gameId,\n                    },\n                },\n            });\n        }\n    }\n}\n\nawait main();",
                    "name": "player-death",
                    "description": null,
                    "eventType": "log",
                    "regex": "takaro-hook-regex-placeholder"
                }
            ],
            "cronJobs": [],
            "functions": [],
            "permissions": []
        }
    ],
    "takaroVersion": "v0.2.1"
}