{
    "name": "limon_BannedItems",
    "versions": [
        {
            "tag": "latest",
            "description": "this version should kick or ban players that have illegal items",
            "configSchema": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"type\":\"object\",\"required\":[],\"additionalProperties\":false,\"properties\":{\"bannedItems \":{\"title\":\"Items\",\"description\":\"Select the items they should not have in their inventory\",\"x-component\":\"item\",\"type\":\"array\",\"uniqueItems\":true,\"items\":{\"type\":\"object\",\"title\":\"Item\",\"properties\":{\"item\":{\"type\":\"string\",\"title\":\"Item\"},\"amount\":{\"type\":\"number\",\"title\":\"Amount\"},\"quality\":{\"type\":\"string\",\"title\":\"Quality\"}}}},\"warningsBeforePunishment\":{\"title\":\"warningsBeforePunishment\",\"default\":0,\"type\":\"number\",\"maximum\":100},\"punishmentType\":{\"title\":\"punishmentType\",\"description\":\"this is to decide what to do  kick ban\",\"default\":\"kick\",\"type\":\"string\",\"enum\":[\"kick\",\"ban\",\"none\"]},\"banDuration\":{\"title\":\"banDuration\",\"description\":\"If you choose ban, you can decide how long\",\"default\":300000,\"x-component\":\"duration\",\"type\":\"number\"},\"kickMessage\":{\"title\":\"kickMessage\",\"description\":\"kickMessage\",\"default\":\"You have been kicked because you have an illegal item: {item}\",\"type\":\"string\"},\"banMessage\":{\"title\":\"banMessage\",\"default\":\"You have been banned because you have an illegal item: {item}\",\"type\":\"string\"},\"warningMessage\":{\"title\":\"warningMessage\",\"description\":\"warningMessage\",\"default\":\"Remove that item from your inventory: {item}\",\"type\":\"string\"}}}",
            "uiSchema": "{}",
            "commands": [],
            "hooks": [],
            "cronJobs": [
                {
                    "function": "import { takaro, data, checkPermission } from '@takaro/helpers';\n\nasync function main() {\n    const { module: mod, gameServerId } = data;\n    const {\n        \"bannedItems \": bannedItems,\n        warningsBeforePunishment,\n        punishmentType,\n        banDuration,\n        kickMessage,\n        banMessage,\n        warningMessage\n    } = data.module.userConfig;\n\n    // Get all banned items in one query\n    const itemIds = bannedItems.map(item => item.item);\n    const itemResponse = await takaro.item.itemControllerSearch({\n        filters: {\n            id: itemIds,\n            gameserverId: [gameServerId]\n        }\n    });\n\n    // Create lookup Maps for banned items\n    const bannedItemsByCode = new Map();\n    const bannedItemsByName = new Map();\n    itemResponse.data.data.forEach(item => {\n        bannedItemsByCode.set(item.code, item);\n        bannedItemsByName.set(item.name, item);\n    });\n\n    // Get all online players\n    const playersResponse = await takaro.playerOnGameserver.playerOnGameServerControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            online: [true]\n        }\n    });\n\n    // Filter players that have banned items and don't have immunity\n    const relevantPlayers = playersResponse.data.data.filter(player =>\n        player.inventory?.some(item =>\n            bannedItemsByCode.has(item.code) || bannedItemsByName.has(item.name)\n        )\n    );\n\n    // Process each relevant player\n    for (const player of relevantPlayers) {\n        // Check immunity permission\n        const pog = (await takaro.playerOnGameserver.playerOnGameServerControllerGetOne(gameServerId, player.player.id)).data.data;\n        const hasImmunity = checkPermission(pog, 'item_ban_immunity');\n        if (hasImmunity) continue;\n\n        // Find the banned item this player has using the lookup maps\n        const bannedItem = player.inventory.find(item =>\n            bannedItemsByCode.has(item.code) || bannedItemsByName.has(item.name)\n        );\n\n        // Get the actual banned item data\n        const matchedBannedItem = bannedItem ? (bannedItemsByCode.get(bannedItem.code) || bannedItemsByName.get(bannedItem.name)) : null;\n\n        if (!bannedItem) continue; // Safety check\n\n        // Get current warnings\n        const existingVariable = await takaro.variable.variableControllerSearch({\n            filters: {\n                playerId: [player.player.id],\n                key: ['banned_items_warning'],\n            },\n        });\n\n        let currentWarnings = existingVariable.data.data[0]\n            ? parseInt(existingVariable.data.data[0].value, 10)\n            : 0;\n\n        currentWarnings++;\n\n        // Handle punishment if warnings exceeded\n        if (currentWarnings >= warningsBeforePunishment && punishmentType !== 'none') {\n            const itemMessage = bannedItem.name;\n\n            if (punishmentType === 'kick') {\n                await takaro.gameserver.gameServerControllerKickPlayer(gameServerId, player.player.id, {\n                    reason: kickMessage.replace('{item}', itemMessage)\n                });\n\n                await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n                    message: `${player.player.name} has been kicked for having banned item: ${itemMessage}`\n                });\n            } else if (punishmentType === 'ban') {\n                const now = new Date();\n                const expiresAt = new Date(now.getTime() + banDuration);\n                await takaro.player.banControllerCreate({\n                    gameServerId,\n                    playerId: player.player.id,\n                    until: expiresAt,\n                    reason: banMessage.replace('{item}', itemMessage)\n                });\n\n                await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n                    message: `${player.player.name} has been banned for having banned item: ${itemMessage}`\n                });\n            }\n\n            if (existingVariable.data.data.length) {\n                await takaro.variable.variableControllerDelete(existingVariable.data.data[0].id);\n            }\n        } else {\n            // Handle warning\n            let message = warningMessage.replace('{item}', bannedItem.name);\n\n            if (punishmentType !== 'none') {\n                message += ` Warning ${currentWarnings} of ${warningsBeforePunishment} before ${punishmentType}`;\n            }\n\n            await takaro.gameserver.gameServerControllerSendMessage(\n                gameServerId,\n                { message }\n            );\n\n            // Update warning count\n            if (existingVariable.data.data.length) {\n                await takaro.variable.variableControllerUpdate(existingVariable.data.data[0].id, {\n                    value: currentWarnings.toString()\n                });\n            } else {\n                await takaro.variable.variableControllerCreate({\n                    playerId: player.player.id,\n                    key: 'banned_items_warning',\n                    value: currentWarnings.toString()\n                });\n            }\n        }\n    }\n}\n\nawait main();",
                    "name": "CheckInventoryBanneditems",
                    "temporalValue": "* * * * *"
                }
            ],
            "functions": [],
            "permissions": [
                {
                    "canHaveCount": false,
                    "description": "Immunity in terms of items you can have in your inventory",
                    "permission": "item_ban_immunity",
                    "friendlyName": "hvb_banned_items_v3_hvb_bannedItems_v1_Item ban immunity"
                }
            ]
        }
    ],
    "takaroVersion": "main"
}