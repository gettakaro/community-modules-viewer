{
    "name": "Limon_BannedItems",
    "versions": [
        {
            "tag": "latest",
  "description": "Enables server administrators to define and enforce a list of banned items within the game. The module periodically checks player inventories, issues warnings for banned items, and can automatically kick or ban players who violate the rules.\n\n  ## Key Functionality\n\n  * **Banned Item Definition:** Administrators can create a list of items that are prohibited for players to possess. This list can include specific item names, codes, amounts, and qualities.\n  * **Inventory Checks:** The module automatically and periodically scans the inventories of all online players to detect the presence of banned items.\n  * **Warning System:** Players found with banned items can be issued warnings. The number of warnings before punishment is configurable.\n  * **Automated Punishment:** The module can automatically apply punishments to players who repeatedly possess banned items. Punishment options include:\n      * `Kick`: The player is removed from the server.\n      * `Ban`: The player is temporarily or permanently banned from the server.\n      * `None`: No automatic punishment is applied (only warnings are given).\n  * **Customizable Messages:** Warning, kick, and ban messages can be customized to provide clear information to players.\n  * **Immunity Permission:** A permission can be granted to specific players or groups, exempting them from the banned item checks and punishments.\n\n  ## How to Use\n\n  1.  **Configuration:**\n      * `bannedItems`: Define the list of banned items. For each item, you can specify the item name, code, amount, and quality. If an item is found in a player's inventory, it will be considered banned.\n      * `warningsBeforePunishment`: Set the number of warnings a player receives before being kicked or banned.\n      * `punishmentType`: Choose the type of punishment to apply (`kick`, `ban`, or `none`).\n      * `banDuration`: If `punishmentType` is set to `ban`, specify the duration of the ban (in milliseconds).\n      * `kickMessage`: Customize the message displayed to a player when they are kicked for having a banned item. The placeholder `{item}` will be replaced with the name of the banned item.\n      * `banMessage`: Customize the message displayed to other players when a player is banned for having a banned item. The placeholder `{item}` will be replaced with the name of the banned item.\n      * `warningMessage`: Customize the warning message displayed to players found with a banned item. The placeholder `{item}` will be replaced with the name of the banned item.\n  2.  **Permissions:**\n      * Grant the `item_ban_immunity` permission to players or groups who should be exempt from the banned item checks.\n  3.  **Installation:** Install the module on your Takaro instance and configure it for your game server.\n\n  ## Important Considerations\n\n  * Accurate item configuration is crucial to avoid false positives. Ensure item names, codes, amounts, and qualities are correctly specified.\n  * Carefully consider the `warningsBeforePunishment` and `punishmentType` settings to balance enforcement with player leniency.\n  * Customize the messages to provide clear and helpful information to players.\n  * Use the `item_ban_immunity` permission judiciously.\n",
            "uiSchema": "{}",
            "commands": [],
            "hooks": [],
            "cronJobs": [
                {
                    "function": "import { takaro, data, checkPermission } from '@takaro/helpers';\n\nasync function main() {\n    const { module: mod, gameServerId } = data;\n    const {\n        \"bannedItems \": bannedItems,\n        warningsBeforePunishment,\n        punishmentType,\n        banDuration,\n        kickMessage,\n        banMessage,\n        warningMessage\n    } = data.module.userConfig;\n\n    // Get all banned items in one query\n    const itemIds = bannedItems.map(item => item.item);\n    const itemResponse = await takaro.item.itemControllerSearch({\n        filters: {\n            id: itemIds,\n            gameserverId: [gameServerId]\n        }\n    });\n\n    // Create lookup Maps for banned items\n    const bannedItemsByCode = new Map();\n    const bannedItemsByName = new Map();\n    itemResponse.data.data.forEach(item => {\n        bannedItemsByCode.set(item.code, item);\n        bannedItemsByName.set(item.name, item);\n    });\n\n    // Get all online players\n    const playersResponse = await takaro.playerOnGameserver.playerOnGameServerControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            online: [true]\n        }\n    });\n\n    // Filter players that have banned items and don't have immunity\n    const relevantPlayers = playersResponse.data.data.filter(player =>\n        player.inventory?.some(item =>\n            bannedItemsByCode.has(item.code) || bannedItemsByName.has(item.name)\n        )\n    );\n\n    // Process each relevant player\n    for (const player of relevantPlayers) {\n        // Check immunity permission\n        const pog = (await takaro.playerOnGameserver.playerOnGameServerControllerGetOne(gameServerId, player.player.id)).data.data;\n        const hasImmunity = checkPermission(pog, 'item_ban_immunity');\n        if (hasImmunity) continue;\n\n        // Find the banned item this player has using the lookup maps\n        const bannedItem = player.inventory.find(item =>\n            bannedItemsByCode.has(item.code) || bannedItemsByName.has(item.name)\n        );\n\n        // Get the actual banned item data\n        const matchedBannedItem = bannedItem ? (bannedItemsByCode.get(bannedItem.code) || bannedItemsByName.get(bannedItem.name)) : null;\n\n        if (!bannedItem) continue; // Safety check\n\n        // Get current warnings\n        const existingVariable = await takaro.variable.variableControllerSearch({\n            filters: {\n                playerId: [player.player.id],\n                key: ['banned_items_warning'],\n            },\n        });\n\n        let currentWarnings = existingVariable.data.data[0]\n            ? parseInt(existingVariable.data.data[0].value, 10)\n            : 0;\n\n        currentWarnings++;\n\n        // Handle punishment if warnings exceeded\n        if (currentWarnings >= warningsBeforePunishment && punishmentType !== 'none') {\n            const itemMessage = bannedItem.name;\n\n            if (punishmentType === 'kick') {\n                await takaro.gameserver.gameServerControllerKickPlayer(gameServerId, player.player.id, {\n                    reason: kickMessage.replace('{item}', itemMessage)\n                });\n\n                await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n                    message: `${player.player.name} has been kicked for having banned item: ${itemMessage}`\n                });\n            } else if (punishmentType === 'ban') {\n                const now = new Date();\n                const expiresAt = new Date(now.getTime() + banDuration);\n                await takaro.player.banControllerCreate({\n                    gameServerId,\n                    playerId: player.player.id,\n                    until: expiresAt,\n                    reason: banMessage.replace('{item}', itemMessage)\n                });\n\n                await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n                    message: `${player.player.name} has been banned for having banned item: ${itemMessage}`\n                });\n            }\n\n            if (existingVariable.data.data.length) {\n                await takaro.variable.variableControllerDelete(existingVariable.data.data[0].id);\n            }\n        } else {\n            // Handle warning\n            let message = warningMessage.replace('{item}', bannedItem.name);\n\n            if (punishmentType !== 'none') {\n                message += ` Warning ${currentWarnings} of ${warningsBeforePunishment} before ${punishmentType}`;\n            }\n\n            await takaro.gameserver.gameServerControllerSendMessage(\n                gameServerId,\n                { message }\n            );\n\n            // Update warning count\n            if (existingVariable.data.data.length) {\n                await takaro.variable.variableControllerUpdate(existingVariable.data.data[0].id, {\n                    value: currentWarnings.toString()\n                });\n            } else {\n                await takaro.variable.variableControllerCreate({\n                    playerId: player.player.id,\n                    key: 'banned_items_warning',\n                    value: currentWarnings.toString()\n                });\n            }\n        }\n    }\n}\n\nawait main();",
                    "name": "CheckInventoryBanneditems",
                    "temporalValue": "* * * * *"
                }
            ],
            "functions": [],
            "permissions": [
                {
                    "canHaveCount": false,
                    "description": "Immunity in terms of items you can have in your inventory",
                    "permission": "item_ban_immunity",
                    "friendlyName": "hvb_banned_items_v3_hvb_bannedItems_v1_Item ban immunity"
                }
            ]
        }
    ],
    "takaroVersion": "main"
}