{
    "name": "Limon_triviaTime",
    "versions": [
        {
            "tag": "0.0.4",
            "description": "# Limon_triviaTime: Interactive Trivia Game System\n\nThe **Limon_triviaTime** module transforms your gaming server with an engaging trivia game system that automatically poses questions and rewards correct answers. This enhanced version supports both the Open Trivia Database API and custom questions.\n\n## Key Benefits:\n- **Dual Question Sources**: Choose between Open Trivia Database API or custom questions\n- **Rich Category Selection**: Access to 20+ categories from the API including General Knowledge, Science, Sports, History, and more\n- **Difficulty Control**: Easy, Medium, and Hard difficulty levels\n- **Flexible Question Types**: Support for True/False and Multiple Choice questions\n- **Flexible Reward System**: Choose between currency or item rewards for winners\n- **Automated Scheduling**: Set trivia events to run at specified intervals\n- **Player Engagement Tool**: Keeps your community active and entertained\n- **Simple Answer Validation**: Easy command-based answer submission system\n\n## Features:\n* Open Trivia Database API integration with 4000+ verified questions\n* Configurable question database with pre-populated examples as fallback\n* Dual reward types (currency or items)\n* Customizable item quality and quantity settings\n* Permission-based participation control\n* Automated trivia scheduling with cron jobs\n* Real-time feedback on incorrect answers\n* Server-wide announcements for winners\n* HTML entity decoding for proper question display\n* Session token support to prevent duplicate questions\n\nIdeal for server administrators looking to increase player retention and build community through interactive gameplay elements. Works seamlessly with existing Takaro economy and item systems.",
            "configSchema": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"type\":\"object\",\"properties\":{\"questionSource\":{\"title\":\"Question Source\",\"description\":\"Choose between Open Trivia Database API or custom questions\",\"type\":\"string\",\"enum\":[\"api\",\"custom\"],\"default\":\"api\"},\"apiCategory\":{\"title\":\"API Categories\",\"description\":\"Categories for Open Trivia Database questions (select multiple or 'any')\",\"type\":\"array\",\"items\":{\"type\":\"string\",\"enum\":[\"any\",\"general_knowledge\",\"books\",\"film\",\"music\",\"musicals_theatres\",\"television\",\"video_games\",\"board_games\",\"science_nature\",\"computers\",\"mathematics\",\"mythology\",\"sports\",\"geography\",\"history\",\"politics\",\"art\",\"celebrities\",\"animals\",\"vehicles\",\"comics\",\"gadgets\",\"anime_manga\",\"cartoon_animations\"]},\"uniqueItems\":true,\"default\":[\"any\"]},\"apiDifficulty\":{\"title\":\"API Difficulty\",\"description\":\"Difficulty level for Open Trivia Database questions\",\"type\":\"string\",\"enum\":[\"any\",\"easy\",\"medium\",\"hard\"],\"default\":\"any\"},\"apiType\":{\"title\":\"Question Type\",\"description\":\"Type of questions from API\",\"type\":\"string\",\"enum\":[\"any\",\"multiple\",\"boolean\"],\"default\":\"any\"},\"rewardType\":{\"title\":\"Reward Type\",\"description\":\"Choose Currency, Items, or Both (random)\",\"default\":\"currency\",\"type\":\"string\",\"enum\":[\"currency\",\"items\",\"both\"]},\"rewardAmount\":{\"title\":\"Reward Amount\",\"description\":\"Currency reward amount\",\"default\":100,\"type\":\"number\",\"minimum\":1,\"maximum\":100000},\"rewardItems\":{\"title\":\"Items\",\"description\":\"Items to give as rewards\",\"x-component\":\"item\",\"type\":\"array\",\"uniqueItems\":true,\"items\":{\"type\":\"object\",\"title\":\"Item\",\"properties\":{\"item\":{\"type\":\"string\",\"title\":\"Item\"},\"amount\":{\"type\":\"number\",\"title\":\"Amount\"},\"quality\":{\"type\":\"string\",\"title\":\"Quality\"}}}},\"questions\":{\"type\":\"array\",\"title\":\"Custom Questions (Fallback)\",\"description\":\"Used when API is unavailable or question source is set to custom\",\"items\":{\"type\":\"object\",\"properties\":{\"question\":{\"type\":\"string\",\"description\":\"The question\",\"minLength\":1},\"answer\":{\"type\":\"string\",\"description\":\"The answer\"}}},\"default\":[{\"question\":\"What is the capital of France?\",\"answer\":\"Paris\"},{\"question\":\"What is the largest planet in our solar system?\",\"answer\":\"Jupiter\"}]}},\"additionalProperties\":false}",
            "uiSchema": "{\"rewardItems\":{\"items\":{\"item\":{\"ui:widget\":\"item\"}}}}",
            "commands": [
                {
                    "function": "import { takaro, data, TakaroUserError } from '@takaro/helpers';\n\nasync function main() {\n    const { player, gameServerId, module: mod, chatMessage } = data;\n\n    // Get the command prefix and extract full answer from raw message\n    const prefix = (await takaro.settings.settingsControllerGetOne('commandPrefix', gameServerId)).data.data.value;\n    const messageWithoutPrefix = chatMessage.msg.slice(prefix.length).trim();\n    const commandParts = messageWithoutPrefix.split(' ');\n\n    if (commandParts.length < 2) {\n        throw new TakaroUserError('Please provide an answer!');\n    }\n\n    const fullAnswer = commandParts.slice(1).join(' ').trim();\n\n    if (!fullAnswer || fullAnswer === '') {\n        throw new TakaroUserError('Please provide an answer!');\n    }\n\n    // Check if there's an active trivia question\n    const questionVariable = await takaro.variable.variableControllerSearch({\n        filters: {\n            key: ['trivia_question'],\n            gameServerId: [gameServerId],\n            moduleId: [mod.moduleId]\n        }\n    });\n\n    if (questionVariable.data.data.length === 0) {\n        throw new TakaroUserError('No active trivia question! Wait for the next one.');\n    }\n\n    // Get the correct answer\n    const answerVariable = await takaro.variable.variableControllerSearch({\n        filters: {\n            key: ['trivia_answer'],\n            gameServerId: [gameServerId],\n            moduleId: [mod.moduleId]\n        }\n    });\n\n    if (answerVariable.data.data.length === 0) {\n        throw new TakaroUserError('No answer found for the current question.');\n    }\n\n    // Get reward info\n    const rewardVariable = await takaro.variable.variableControllerSearch({\n        filters: {\n            key: ['trivia_reward'],\n            gameServerId: [gameServerId],\n            moduleId: [mod.moduleId]\n        }\n    });\n\n    if (rewardVariable.data.data.length === 0) {\n        throw new TakaroUserError('No reward configured for this trivia.');\n    }\n\n    const correctAnswer = answerVariable.data.data[0].value;\n    const playerAnswer = fullAnswer; // Use the full answer we extracted\n\n    // Normalize answers for comparison (lowercase, remove extra spaces)\n    const normalizeAnswer = (answer) => {\n        return answer.toLowerCase().replace(/\\s+/g, ' ').trim();\n    };\n\n    const normalizedCorrectAnswer = normalizeAnswer(correctAnswer);\n    const normalizedPlayerAnswer = normalizeAnswer(playerAnswer);\n\n    console.log(`Player ${player.name} answered: \"${playerAnswer}\" (normalized: \"${normalizedPlayerAnswer}\")`);\n    console.log(`Correct answer: \"${correctAnswer}\" (normalized: \"${normalizedCorrectAnswer}\")`);\n\n    // Check if the answer is correct\n    if (normalizedPlayerAnswer === normalizedCorrectAnswer) {\n        // Give reward\n        const rewardData = JSON.parse(rewardVariable.data.data[0].value);\n\n        let rewardMessage = '';\n\n        if (rewardData.type === 'currency') {\n            await takaro.playerOnGameserver.playerOnGameServerControllerAddCurrency(gameServerId, player.id, {\n                currency: rewardData.amount\n            });\n\n            const currencyName = (await takaro.settings.settingsControllerGetOne('currencyName', gameServerId)).data.data.value;\n            rewardMessage = `You won ${rewardData.amount} ${currencyName}!`;\n\n        } else if (rewardData.type === 'items') {\n            const item = (await takaro.item.itemControllerFindOne(rewardData.itemId)).data.data;\n\n            await takaro.gameserver.gameServerControllerGiveItem(gameServerId, player.id, {\n                name: item.code,\n                amount: rewardData.amount,\n                quality: rewardData.quality || ''\n            });\n\n            rewardMessage = `You won ${rewardData.amount}x ${item.name}!`;\n        }\n\n        // WIN TRACKING - Record the player's win\n        const winKey = `trivia_wins_${player.id}`;\n        const existingWins = await takaro.variable.variableControllerSearch({\n            filters: {\n                key: [winKey],\n                gameServerId: [gameServerId],\n                moduleId: [mod.moduleId]\n            }\n        });\n\n        let totalWins = 1;\n        if (existingWins.data.data.length > 0) {\n            totalWins = parseInt(existingWins.data.data[0].value) + 1;\n            await takaro.variable.variableControllerUpdate(existingWins.data.data[0].id, {\n                value: totalWins.toString()\n            });\n        } else {\n            await takaro.variable.variableControllerCreate({\n                key: winKey,\n                value: '1',\n                gameServerId,\n                moduleId: mod.moduleId,\n                playerId: player.id\n            });\n        }\n\n        // Success message with total wins\n        await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n            message: `🎉 ${player.name} got it right! The answer was: ${correctAnswer}. ${rewardMessage} (Total wins: ${totalWins})`\n        });\n\n        // Clean up trivia variables\n        const variablesToClean = await takaro.variable.variableControllerSearch({\n            filters: {\n                key: ['trivia_question', 'trivia_answer', 'trivia_reward', 'trivia_type', 'trivia_incorrect_answers'],\n                gameServerId: [gameServerId],\n                moduleId: [mod.moduleId]\n            }\n        });\n\n        await Promise.all(variablesToClean.data.data.map(variable =>\n            takaro.variable.variableControllerDelete(variable.id)\n        ));\n\n        console.log(`${player.name} answered correctly and won! Total wins: ${totalWins}`);\n\n    } else {\n        // Wrong answer\n        await player.pm(`❌ Sorry, \"${playerAnswer}\" is not correct. Try again!`);\n        console.log(`${player.name} answered incorrectly.`);\n    }\n}\n\nawait main();",
                    "name": "playerAnswer",
                    "description": null,
                    "trigger": "answer",
                    "helpText": "Submit your answer to the current trivia question",
                    "arguments": []
                },
                {
                    "function": "import { takaro, data, checkPermission, TakaroUserError } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, module: mod, pog, player } = data;\n\n    // Check permission\n    if (!checkPermission(pog, 'TRIVIA_RESET_LEADERBOARD')) {\n        throw new TakaroUserError('You do not have permission to reset the trivia leaderboard.');\n    }\n\n    // Get all trivia-related variables for this server\n    const triviaVariables = await takaro.variable.variableControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            moduleId: [mod.moduleId]\n        },\n        search: {\n            key: ['trivia_wins_', 'trivia_question', 'trivia_answer', 'trivia_reward', 'trivia_type', 'trivia_incorrect_answers']\n        },\n        limit: 1000\n    });\n\n    if (triviaVariables.data.data.length === 0) {\n        await player.pm('🗑️ No trivia data found to reset.');\n        return;\n    }\n\n    // Delete all trivia variables\n    const deletePromises = triviaVariables.data.data.map(variable =>\n        takaro.variable.variableControllerDelete(variable.id)\n    );\n\n    await Promise.allSettled(deletePromises);\n\n    // Send confirmation\n    const winsCount = triviaVariables.data.data.filter(v => v.key.startsWith('trivia_wins_')).length;\n\n    await player.pm(`🗑️ Trivia leaderboard reset successfully! Cleared ${winsCount} player records.`);\n\n    // Announce to server\n    await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n        message: `🔄 Trivia leaderboard has been reset by an administrator!`\n    });\n\n    console.log(`Trivia leaderboard reset by player ${player.name} (${player.id})`);\n}\n\nawait main();",
                    "name": "triviareset",
                    "description": null,
                    "trigger": "triviareset",
                    "helpText": "No help text available",
                    "arguments": []
                },
                {
                    "function": "import { takaro, data } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, module: mod, player } = data;\n\n    // Get all trivia wins for this server\n    const allWins = await takaro.variable.variableControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            moduleId: [mod.moduleId]\n        },\n        search: {\n            key: ['trivia_wins_']\n        },\n        limit: 1000\n    });\n\n    if (allWins.data.data.length === 0) {\n        await player.pm('🏆 No trivia winners yet! Be the first to answer a question correctly!');\n        return;\n    }\n\n    // Sort by wins (stored as string, so convert to number)\n    const sortedWins = allWins.data.data\n        .map(record => ({\n            playerId: record.playerId,\n            wins: parseInt(record.value) || 0\n        }))\n        .sort((a, b) => b.wins - a.wins)\n        .slice(0, mod.userConfig.leaderboardSize || 10);\n\n    // Get player names\n    const leaderboard = await Promise.all(\n        sortedWins.map(async (record, index) => {\n            const playerData = await takaro.player.playerControllerGetOne(record.playerId);\n            return {\n                position: index + 1,\n                name: playerData.data.data.name,\n                wins: record.wins\n            };\n        })\n    );\n\n    // Build leaderboard message\n    let message = '🏆 **Trivia Leaderboard** 🧠\\n\\n';\n\n    leaderboard.forEach(entry => {\n        const medal = entry.position === 1 ? '🥇' : entry.position === 2 ? '🥈' : entry.position === 3 ? '🥉' : '  ';\n        message += `${medal} ${entry.position}. ${entry.name} - ${entry.wins} win${entry.wins !== 1 ? 's' : ''}\\n`;\n    });\n\n    // Add current player's ranking if not in top list\n    const currentPlayerWins = sortedWins.find(record => record.playerId === player.id);\n    if (!currentPlayerWins && allWins.data.data.some(record => record.playerId === player.id)) {\n        const playerRecord = allWins.data.data.find(record => record.playerId === player.id);\n        const playerWins = parseInt(playerRecord.value) || 0;\n        const playerRank = allWins.data.data\n            .map(record => parseInt(record.value) || 0)\n            .sort((a, b) => b - a)\n            .findIndex(wins => wins <= playerWins) + 1;\n\n        message += `\\n📍 Your rank: #${playerRank} with ${playerWins} win${playerWins !== 1 ? 's' : ''}`;\n    }\n\n    await player.pm(message);\n}\n\nawait main();",
                    "name": "triviaboard",
                    "description": null,
                    "trigger": "triviaboard",
                    "helpText": "No help text available",
                    "arguments": []
                }
            ],
            "hooks": [],
            "cronJobs": [
                {
                    "function": "import { takaro, data } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, module: mod } = data;\n\n    // Check for online players\n    const currentPlayersRes = await takaro.playerOnGameserver.playerOnGameServerControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            online: [true]\n        }\n    });\n\n    if (currentPlayersRes.data.data.length === 0) {\n        console.log('No online players, skipping trivia');\n        return;\n    }\n\n    console.log(`Found ${currentPlayersRes.data.data.length} online players`);\n\n    // Clear existing variables first\n    const existingVariables = await takaro.variable.variableControllerSearch({\n        filters: {\n            key: ['trivia_question', 'trivia_answer', 'trivia_reward', 'trivia_type', 'trivia_incorrect_answers'],\n            gameServerId: [gameServerId],\n            moduleId: [mod.moduleId]\n        }\n    });\n\n    await Promise.all(existingVariables.data.data.map(variable =>\n        takaro.variable.variableControllerDelete(variable.id)\n    ));\n\n    let questionData = null;\n    let questionSource = mod.userConfig.questionSource || 'api';\n\n    if (questionSource === 'api') {\n        console.log('Attempting to fetch from Open Trivia Database API using Axios');\n\n        try {\n            // Check if axios is available\n            if (takaro.axios) {\n                console.log('Axios is available! Making API request...');\n\n                // Build API URL\n                let url = 'https://opentdb.com/api.php?amount=1';\n\n                // Add categories if specified\n                const categories = mod.userConfig.apiCategory || ['any'];\n                if (categories.length > 0 && !categories.includes('any')) {\n                    const categoryMap = {\n                        'general_knowledge': 9, 'books': 10, 'film': 11, 'music': 12,\n                        'musicals_theatres': 13, 'television': 14, 'video_games': 15,\n                        'board_games': 16, 'science_nature': 17, 'computers': 18,\n                        'mathematics': 19, 'mythology': 20, 'sports': 21, 'geography': 22,\n                        'history': 23, 'politics': 24, 'art': 25, 'celebrities': 26,\n                        'animals': 27, 'vehicles': 28, 'comics': 29, 'gadgets': 30,\n                        'anime_manga': 31, 'cartoon_animations': 32\n                    };\n\n                    const randomCategory = categories[Math.floor(Math.random() * categories.length)];\n                    const categoryId = categoryMap[randomCategory];\n                    if (categoryId) {\n                        url += `&category=${categoryId}`;\n                    }\n                }\n\n                // Add difficulty if specified\n                if (mod.userConfig.apiDifficulty && mod.userConfig.apiDifficulty !== 'any') {\n                    url += `&difficulty=${mod.userConfig.apiDifficulty}`;\n                }\n\n                // Add type if specified\n                if (mod.userConfig.apiType && mod.userConfig.apiType !== 'any') {\n                    url += `&type=${mod.userConfig.apiType}`;\n                }\n\n                console.log('Fetching trivia question from:', url);\n\n                // Make the API request using Axios\n                const response = await takaro.axios.get(url);\n                const apiData = response.data;\n\n                console.log('API Response:', JSON.stringify(apiData));\n\n                if (apiData.response_code === 0 && apiData.results && apiData.results.length > 0) {\n                    const question = apiData.results[0];\n\n                    questionData = {\n                        question: decodeHtmlEntities(question.question),\n                        answer: decodeHtmlEntities(question.correct_answer),\n                        type: question.type,\n                        incorrectAnswers: question.incorrect_answers ? question.incorrect_answers.map(decodeHtmlEntities) : []\n                    };\n                    console.log('Successfully fetched API question:', questionData.question);\n                } else {\n                    console.log('API returned error or no results:', apiData);\n                    questionSource = 'custom';\n                }\n            } else {\n                console.log('Axios not available, falling back to custom questions');\n                questionSource = 'custom';\n            }\n        } catch (error) {\n            console.log('API failed, falling back to custom questions:', error.message);\n            questionSource = 'custom';\n        }\n    }\n\n    if (questionSource === 'custom' || !questionData) {\n        console.log('Using custom questions');\n        const questions = mod.userConfig.questions || [\n            { question: \"What is the largest country in the world?\", answer: \"Russia\" },\n            { question: \"What is the capital of France?\", answer: \"Paris\" },\n            { question: \"What is 2 + 2?\", answer: \"4\" }\n        ];\n\n        const randomQuestion = questions[Math.floor(Math.random() * questions.length)];\n        questionData = {\n            question: randomQuestion.question,\n            answer: randomQuestion.answer,\n            type: 'multiple',\n            incorrectAnswers: []\n        };\n    }\n\n    if (!questionData) {\n        console.log('No question data available');\n        return;\n    }\n\n    // Store question data\n    await takaro.variable.variableControllerCreate({\n        key: 'trivia_question',\n        value: questionData.question,\n        gameServerId,\n        moduleId: mod.moduleId\n    });\n\n    await takaro.variable.variableControllerCreate({\n        key: 'trivia_answer',\n        value: questionData.answer,\n        gameServerId,\n        moduleId: mod.moduleId\n    });\n\n    await takaro.variable.variableControllerCreate({\n        key: 'trivia_type',\n        value: questionData.type,\n        gameServerId,\n        moduleId: mod.moduleId\n    });\n\n    if (questionData.incorrectAnswers.length > 0) {\n        await takaro.variable.variableControllerCreate({\n            key: 'trivia_incorrect_answers',\n            value: JSON.stringify(questionData.incorrectAnswers),\n            gameServerId,\n            moduleId: mod.moduleId\n        });\n    }\n\n    // Setup reward - Updated to handle \"both\" option\n    const rewardType = mod.userConfig.rewardType || 'currency';\n    let selectedRewardType = rewardType;\n\n    // If \"both\" is selected, randomly choose between currency and items\n    if (rewardType === 'both') {\n        selectedRewardType = Math.random() < 0.5 ? 'currency' : 'items';\n    }\n\n    if (selectedRewardType === 'items') {\n        const configuredItems = mod.userConfig.rewardItems || [];\n        if (configuredItems.length > 0) {\n            const randomItemIndex = Math.floor(Math.random() * configuredItems.length);\n            const selectedItem = configuredItems[randomItemIndex];\n\n            await takaro.variable.variableControllerCreate({\n                key: 'trivia_reward',\n                value: JSON.stringify({\n                    type: 'items',\n                    itemId: selectedItem.item,\n                    amount: selectedItem.amount || 1,\n                    quality: selectedItem.quality || ''\n                }),\n                gameServerId,\n                moduleId: mod.moduleId\n            });\n        } else {\n            console.error('Items reward type selected but no items configured, falling back to currency');\n            await takaro.variable.variableControllerCreate({\n                key: 'trivia_reward',\n                value: JSON.stringify({\n                    type: 'currency',\n                    amount: mod.userConfig.rewardAmount || 100\n                }),\n                gameServerId,\n                moduleId: mod.moduleId\n            });\n        }\n    } else {\n        // Currency reward\n        await takaro.variable.variableControllerCreate({\n            key: 'trivia_reward',\n            value: JSON.stringify({\n                type: 'currency',\n                amount: mod.userConfig.rewardAmount || 100\n            }),\n            gameServerId,\n            moduleId: mod.moduleId\n        });\n    }\n    const prefix = (await takaro.settings.settingsControllerGetOne('commandPrefix', gameServerId)).data.data.value;\n\n    // Create appropriate message based on question type\n    let message = `🧠 Trivia Time! ${questionData.question}`;\n\n    if (questionData.type === 'boolean') {\n        message += ` (Answer with ${prefix}answer true or ${prefix}answer false)`;\n    } else if (questionData.incorrectAnswers.length > 0) {\n        const allAnswers = [questionData.answer, ...questionData.incorrectAnswers]\n            .sort(() => Math.random() - 0.5);\n\n        message += `\\nOptions: ${allAnswers.join(', ')} (Answer with ${prefix}answer <your choice>)`;\n    } else {\n        message += ` (Answer with ${prefix}answer <your guess>)`;\n    }\n\n    await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n        message: message\n    });\n\n    console.log('Trivia question posted successfully');\n}\n\nfunction decodeHtmlEntities(text) {\n    if (!text) return text;\n\n    const entityMap = {\n        '&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '\"', '&#039;': \"'\", '&apos;': \"'\",\n        '&nbsp;': ' ', '&eacute;': 'é', '&egrave;': 'è', '&ecirc;': 'ê', '&euml;': 'ë',\n        '&aacute;': 'á', '&agrave;': 'à', '&acirc;': 'â', '&auml;': 'ä',\n        '&iacute;': 'í', '&igrave;': 'ì', '&icirc;': 'î', '&iuml;': 'ï',\n        '&oacute;': 'ó', '&ograve;': 'ò', '&ocirc;': 'ô', '&ouml;': 'ö',\n        '&uacute;': 'ú', '&ugrave;': 'ù', '&ucirc;': 'û', '&uuml;': 'ü',\n        '&ntilde;': 'ñ', '&ccedil;': 'ç'\n    };\n\n    let decoded = text;\n    for (const [entity, char] of Object.entries(entityMap)) {\n        decoded = decoded.replace(new RegExp(entity, 'g'), char);\n    }\n\n    decoded = decoded.replace(/&#(\\d+);/g, (match, num) => {\n        return String.fromCharCode(parseInt(num, 10));\n    });\n\n    return decoded;\n}\n\nawait main();",
                    "name": "TriviaTime",
                    "description": null,
                    "temporalValue": "0 0 * * *"
                }
            ],
            "functions": [],
            "permissions": [
                {
                    "canHaveCount": false,
                    "description": "Allows players to participate in trivia games",
                    "permission": "TRIVIA_PARTICIPATE",
                    "friendlyName": "Participate in Trivia"
                },
                {
                    "canHaveCount": false,
                    "description": "Allows resetting the trivia leaderboard scores",
                    "permission": "TRIVIA_RESET_LEADERBOARD",
                    "friendlyName": "Reset Trivia Leaderboard"
                }
            ]
        },
        {
            "tag": "latest",
            "description": "# Limon_triviaTime: Interactive Trivia Game System\n\nThe **Limon_triviaTime** module transforms your gaming server with an engaging trivia game system that automatically poses questions and rewards correct answers. This enhanced version supports both the Open Trivia Database API and custom questions.\n\n## Key Benefits:\n- **Dual Question Sources**: Choose between Open Trivia Database API or custom questions\n- **Rich Category Selection**: Access to 20+ categories from the API including General Knowledge, Science, Sports, History, and more\n- **Difficulty Control**: Easy, Medium, and Hard difficulty levels\n- **Flexible Question Types**: Support for True/False and Multiple Choice questions\n- **Flexible Reward System**: Choose between currency or item rewards for winners\n- **Automated Scheduling**: Set trivia events to run at specified intervals\n- **Player Engagement Tool**: Keeps your community active and entertained\n- **Simple Answer Validation**: Easy command-based answer submission system\n\n## Features:\n* Open Trivia Database API integration with 4000+ verified questions\n* Configurable question database with pre-populated examples as fallback\n* Dual reward types (currency or items)\n* Customizable item quality and quantity settings\n* Permission-based participation control\n* Automated trivia scheduling with cron jobs\n* Real-time feedback on incorrect answers\n* Server-wide announcements for winners\n* HTML entity decoding for proper question display\n* Session token support to prevent duplicate questions\n\nIdeal for server administrators looking to increase player retention and build community through interactive gameplay elements. Works seamlessly with existing Takaro economy and item systems.",
            "configSchema": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"type\":\"object\",\"properties\":{\"questionSource\":{\"title\":\"Question Source\",\"description\":\"Choose between Open Trivia Database API or custom questions\",\"type\":\"string\",\"enum\":[\"api\",\"custom\"],\"default\":\"api\"},\"apiCategory\":{\"title\":\"API Categories\",\"description\":\"Categories for Open Trivia Database questions (select multiple or 'any')\",\"type\":\"array\",\"items\":{\"type\":\"string\",\"enum\":[\"any\",\"general_knowledge\",\"books\",\"film\",\"music\",\"musicals_theatres\",\"television\",\"video_games\",\"board_games\",\"science_nature\",\"computers\",\"mathematics\",\"mythology\",\"sports\",\"geography\",\"history\",\"politics\",\"art\",\"celebrities\",\"animals\",\"vehicles\",\"comics\",\"gadgets\",\"anime_manga\",\"cartoon_animations\"]},\"uniqueItems\":true,\"default\":[\"any\"]},\"apiDifficulty\":{\"title\":\"API Difficulty\",\"description\":\"Difficulty level for Open Trivia Database questions\",\"type\":\"string\",\"enum\":[\"any\",\"easy\",\"medium\",\"hard\"],\"default\":\"any\"},\"apiType\":{\"title\":\"Question Type\",\"description\":\"Type of questions from API\",\"type\":\"string\",\"enum\":[\"any\",\"multiple\",\"boolean\"],\"default\":\"any\"},\"rewardType\":{\"title\":\"Reward Type\",\"description\":\"Choose Currency, Items, or Both (random)\",\"default\":\"currency\",\"type\":\"string\",\"enum\":[\"currency\",\"items\",\"both\"]},\"rewardAmount\":{\"title\":\"Reward Amount\",\"description\":\"Currency reward amount\",\"default\":100,\"type\":\"number\",\"minimum\":1,\"maximum\":100000},\"rewardItems\":{\"title\":\"Items\",\"description\":\"Items to give as rewards\",\"x-component\":\"item\",\"type\":\"array\",\"uniqueItems\":true,\"items\":{\"type\":\"object\",\"title\":\"Item\",\"properties\":{\"item\":{\"type\":\"string\",\"title\":\"Item\"},\"amount\":{\"type\":\"number\",\"title\":\"Amount\"},\"quality\":{\"type\":\"string\",\"title\":\"Quality\"}}}},\"questions\":{\"type\":\"array\",\"title\":\"Custom Questions (Fallback)\",\"description\":\"Used when API is unavailable or question source is set to custom\",\"items\":{\"type\":\"object\",\"properties\":{\"question\":{\"type\":\"string\",\"description\":\"The question\",\"minLength\":1},\"answer\":{\"type\":\"string\",\"description\":\"The answer\"}}},\"default\":[{\"question\":\"What is the capital of France?\",\"answer\":\"Paris\"},{\"question\":\"What is the largest planet in our solar system?\",\"answer\":\"Jupiter\"}]}},\"additionalProperties\":false}",
            "uiSchema": "{\"rewardItems\":{\"items\":{\"item\":{\"ui:widget\":\"item\"}}}}",
            "commands": [
                {
                    "function": "import { takaro, data, TakaroUserError } from '@takaro/helpers';\n\nasync function main() {\n    const { player, gameServerId, module: mod, chatMessage } = data;\n\n    // Get the command prefix and extract full answer from raw message\n    const prefix = (await takaro.settings.settingsControllerGetOne('commandPrefix', gameServerId)).data.data.value;\n    const messageWithoutPrefix = chatMessage.msg.slice(prefix.length).trim();\n    const commandParts = messageWithoutPrefix.split(' ');\n\n    if (commandParts.length < 2) {\n        throw new TakaroUserError('Please provide an answer!');\n    }\n\n    const fullAnswer = commandParts.slice(1).join(' ').trim();\n\n    if (!fullAnswer || fullAnswer === '') {\n        throw new TakaroUserError('Please provide an answer!');\n    }\n\n    // Check if there's an active trivia question\n    const questionVariable = await takaro.variable.variableControllerSearch({\n        filters: {\n            key: ['trivia_question'],\n            gameServerId: [gameServerId],\n            moduleId: [mod.moduleId]\n        }\n    });\n\n    if (questionVariable.data.data.length === 0) {\n        throw new TakaroUserError('No active trivia question! Wait for the next one.');\n    }\n\n    // Get the correct answer\n    const answerVariable = await takaro.variable.variableControllerSearch({\n        filters: {\n            key: ['trivia_answer'],\n            gameServerId: [gameServerId],\n            moduleId: [mod.moduleId]\n        }\n    });\n\n    if (answerVariable.data.data.length === 0) {\n        throw new TakaroUserError('No answer found for the current question.');\n    }\n\n    // Get reward info\n    const rewardVariable = await takaro.variable.variableControllerSearch({\n        filters: {\n            key: ['trivia_reward'],\n            gameServerId: [gameServerId],\n            moduleId: [mod.moduleId]\n        }\n    });\n\n    if (rewardVariable.data.data.length === 0) {\n        throw new TakaroUserError('No reward configured for this trivia.');\n    }\n\n    const correctAnswer = answerVariable.data.data[0].value;\n    const playerAnswer = fullAnswer; // Use the full answer we extracted\n\n    // Normalize answers for comparison (lowercase, remove extra spaces)\n    const normalizeAnswer = (answer) => {\n        return answer.toLowerCase().replace(/\\s+/g, ' ').trim();\n    };\n\n    const normalizedCorrectAnswer = normalizeAnswer(correctAnswer);\n    const normalizedPlayerAnswer = normalizeAnswer(playerAnswer);\n\n    console.log(`Player ${player.name} answered: \"${playerAnswer}\" (normalized: \"${normalizedPlayerAnswer}\")`);\n    console.log(`Correct answer: \"${correctAnswer}\" (normalized: \"${normalizedCorrectAnswer}\")`);\n\n    // Check if the answer is correct\n    if (normalizedPlayerAnswer === normalizedCorrectAnswer) {\n        // Give reward\n        const rewardData = JSON.parse(rewardVariable.data.data[0].value);\n\n        let rewardMessage = '';\n\n        if (rewardData.type === 'currency') {\n            await takaro.playerOnGameserver.playerOnGameServerControllerAddCurrency(gameServerId, player.id, {\n                currency: rewardData.amount\n            });\n\n            const currencyName = (await takaro.settings.settingsControllerGetOne('currencyName', gameServerId)).data.data.value;\n            rewardMessage = `You won ${rewardData.amount} ${currencyName}!`;\n\n        } else if (rewardData.type === 'items') {\n            const item = (await takaro.item.itemControllerFindOne(rewardData.itemId)).data.data;\n\n            await takaro.gameserver.gameServerControllerGiveItem(gameServerId, player.id, {\n                name: item.code,\n                amount: rewardData.amount,\n                quality: rewardData.quality || ''\n            });\n\n            rewardMessage = `You won ${rewardData.amount}x ${item.name}!`;\n        }\n\n        // WIN TRACKING - Record the player's win\n        const winKey = `trivia_wins_${player.id}`;\n        const existingWins = await takaro.variable.variableControllerSearch({\n            filters: {\n                key: [winKey],\n                gameServerId: [gameServerId],\n                moduleId: [mod.moduleId]\n            }\n        });\n\n        let totalWins = 1;\n        if (existingWins.data.data.length > 0) {\n            totalWins = parseInt(existingWins.data.data[0].value) + 1;\n            await takaro.variable.variableControllerUpdate(existingWins.data.data[0].id, {\n                value: totalWins.toString()\n            });\n        } else {\n            await takaro.variable.variableControllerCreate({\n                key: winKey,\n                value: '1',\n                gameServerId,\n                moduleId: mod.moduleId,\n                playerId: player.id\n            });\n        }\n\n        // Success message with total wins\n        await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n            message: `🎉 ${player.name} got it right! The answer was: ${correctAnswer}. ${rewardMessage} (Total wins: ${totalWins})`\n        });\n\n        // Clean up trivia variables\n        const variablesToClean = await takaro.variable.variableControllerSearch({\n            filters: {\n                key: ['trivia_question', 'trivia_answer', 'trivia_reward', 'trivia_type', 'trivia_incorrect_answers'],\n                gameServerId: [gameServerId],\n                moduleId: [mod.moduleId]\n            }\n        });\n\n        await Promise.all(variablesToClean.data.data.map(variable =>\n            takaro.variable.variableControllerDelete(variable.id)\n        ));\n\n        console.log(`${player.name} answered correctly and won! Total wins: ${totalWins}`);\n\n    } else {\n        // Wrong answer\n        await player.pm(`❌ Sorry, \"${playerAnswer}\" is not correct. Try again!`);\n        console.log(`${player.name} answered incorrectly.`);\n    }\n}\n\nawait main();",
                    "name": "playerAnswer",
                    "description": "answer command",
                    "trigger": "answer",
                    "helpText": "Submit your answer to the current trivia question",
                    "arguments": []
                },
                {
                    "function": "import { takaro, data } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, module: mod, player } = data;\n\n    // Get all trivia wins for this server\n    const allWins = await takaro.variable.variableControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            moduleId: [mod.moduleId]\n        },\n        search: {\n            key: ['trivia_wins_']\n        },\n        limit: 1000\n    });\n\n    if (allWins.data.data.length === 0) {\n        await player.pm('🏆 No trivia winners yet! Be the first to answer a question correctly!');\n        return;\n    }\n\n    // Sort by wins (stored as string, so convert to number)\n    const sortedWins = allWins.data.data\n        .map(record => ({\n            playerId: record.playerId,\n            wins: parseInt(record.value) || 0\n        }))\n        .sort((a, b) => b.wins - a.wins)\n        .slice(0, mod.userConfig.leaderboardSize || 10);\n\n    // Get player names\n    const leaderboard = await Promise.all(\n        sortedWins.map(async (record, index) => {\n            const playerData = await takaro.player.playerControllerGetOne(record.playerId);\n            return {\n                position: index + 1,\n                name: playerData.data.data.name,\n                wins: record.wins\n            };\n        })\n    );\n\n    // Build leaderboard message\n    let message = '🏆 **Trivia Leaderboard** 🧠\\n\\n';\n\n    leaderboard.forEach(entry => {\n        const medal = entry.position === 1 ? '🥇' : entry.position === 2 ? '🥈' : entry.position === 3 ? '🥉' : '  ';\n        message += `${medal} ${entry.position}. ${entry.name} - ${entry.wins} win${entry.wins !== 1 ? 's' : ''}\\n`;\n    });\n\n    // Add current player's ranking if not in top list\n    const currentPlayerWins = sortedWins.find(record => record.playerId === player.id);\n    if (!currentPlayerWins && allWins.data.data.some(record => record.playerId === player.id)) {\n        const playerRecord = allWins.data.data.find(record => record.playerId === player.id);\n        const playerWins = parseInt(playerRecord.value) || 0;\n        const playerRank = allWins.data.data\n            .map(record => parseInt(record.value) || 0)\n            .sort((a, b) => b - a)\n            .findIndex(wins => wins <= playerWins) + 1;\n\n        message += `\\n📍 Your rank: #${playerRank} with ${playerWins} win${playerWins !== 1 ? 's' : ''}`;\n    }\n\n    await player.pm(message);\n}\n\nawait main();",
                    "name": "triviaboard",
                    "description": null,
                    "trigger": "triviaboard",
                    "helpText": "No help text available",
                    "arguments": []
                },
                {
                    "function": "import { takaro, data, checkPermission, TakaroUserError } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, module: mod, pog, player } = data;\n\n    // Check permission\n    if (!checkPermission(pog, 'TRIVIA_RESET_LEADERBOARD')) {\n        throw new TakaroUserError('You do not have permission to reset the trivia leaderboard.');\n    }\n\n    // Get all trivia-related variables for this server\n    const triviaVariables = await takaro.variable.variableControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            moduleId: [mod.moduleId]\n        },\n        search: {\n            key: ['trivia_wins_', 'trivia_question', 'trivia_answer', 'trivia_reward', 'trivia_type', 'trivia_incorrect_answers']\n        },\n        limit: 1000\n    });\n\n    if (triviaVariables.data.data.length === 0) {\n        await player.pm('🗑️ No trivia data found to reset.');\n        return;\n    }\n\n    // Delete all trivia variables\n    const deletePromises = triviaVariables.data.data.map(variable =>\n        takaro.variable.variableControllerDelete(variable.id)\n    );\n\n    await Promise.allSettled(deletePromises);\n\n    // Send confirmation\n    const winsCount = triviaVariables.data.data.filter(v => v.key.startsWith('trivia_wins_')).length;\n\n    await player.pm(`🗑️ Trivia leaderboard reset successfully! Cleared ${winsCount} player records.`);\n\n    // Announce to server\n    await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n        message: `🔄 Trivia leaderboard has been reset by an administrator!`\n    });\n\n    console.log(`Trivia leaderboard reset by player ${player.name} (${player.id})`);\n}\n\nawait main();",
                    "name": "triviareset",
                    "description": null,
                    "trigger": "triviareset",
                    "helpText": "No help text available",
                    "arguments": []
                }
            ],
            "hooks": [],
            "cronJobs": [
                {
                    "function": "import { takaro, data } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, module: mod } = data;\n\n    // Check for online players\n    const currentPlayersRes = await takaro.playerOnGameserver.playerOnGameServerControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            online: [true]\n        }\n    });\n\n    if (currentPlayersRes.data.data.length === 0) {\n        console.log('No online players, skipping trivia');\n        return;\n    }\n\n    console.log(`Found ${currentPlayersRes.data.data.length} online players`);\n\n    // Clear existing variables first\n    const existingVariables = await takaro.variable.variableControllerSearch({\n        filters: {\n            key: ['trivia_question', 'trivia_answer', 'trivia_reward', 'trivia_type', 'trivia_incorrect_answers'],\n            gameServerId: [gameServerId],\n            moduleId: [mod.moduleId]\n        }\n    });\n\n    await Promise.all(existingVariables.data.data.map(variable =>\n        takaro.variable.variableControllerDelete(variable.id)\n    ));\n\n    let questionData = null;\n    let questionSource = mod.userConfig.questionSource || 'api';\n\n    if (questionSource === 'api') {\n        console.log('Attempting to fetch from Open Trivia Database API using Axios');\n\n        try {\n            // Check if axios is available\n            if (takaro.axios) {\n                console.log('Axios is available! Making API request...');\n\n                // Build API URL\n                let url = 'https://opentdb.com/api.php?amount=1';\n\n                // Add categories if specified\n                const categories = mod.userConfig.apiCategory || ['any'];\n                if (categories.length > 0 && !categories.includes('any')) {\n                    const categoryMap = {\n                        'general_knowledge': 9, 'books': 10, 'film': 11, 'music': 12,\n                        'musicals_theatres': 13, 'television': 14, 'video_games': 15,\n                        'board_games': 16, 'science_nature': 17, 'computers': 18,\n                        'mathematics': 19, 'mythology': 20, 'sports': 21, 'geography': 22,\n                        'history': 23, 'politics': 24, 'art': 25, 'celebrities': 26,\n                        'animals': 27, 'vehicles': 28, 'comics': 29, 'gadgets': 30,\n                        'anime_manga': 31, 'cartoon_animations': 32\n                    };\n\n                    const randomCategory = categories[Math.floor(Math.random() * categories.length)];\n                    const categoryId = categoryMap[randomCategory];\n                    if (categoryId) {\n                        url += `&category=${categoryId}`;\n                    }\n                }\n\n                // Add difficulty if specified\n                if (mod.userConfig.apiDifficulty && mod.userConfig.apiDifficulty !== 'any') {\n                    url += `&difficulty=${mod.userConfig.apiDifficulty}`;\n                }\n\n                // Add type if specified\n                if (mod.userConfig.apiType && mod.userConfig.apiType !== 'any') {\n                    url += `&type=${mod.userConfig.apiType}`;\n                }\n\n                console.log('Fetching trivia question from:', url);\n\n                // Make the API request using Axios\n                const response = await takaro.axios.get(url);\n                const apiData = response.data;\n\n                console.log('API Response:', JSON.stringify(apiData));\n\n                if (apiData.response_code === 0 && apiData.results && apiData.results.length > 0) {\n                    const question = apiData.results[0];\n\n                    questionData = {\n                        question: decodeHtmlEntities(question.question),\n                        answer: decodeHtmlEntities(question.correct_answer),\n                        type: question.type,\n                        incorrectAnswers: question.incorrect_answers ? question.incorrect_answers.map(decodeHtmlEntities) : []\n                    };\n                    console.log('Successfully fetched API question:', questionData.question);\n                } else {\n                    console.log('API returned error or no results:', apiData);\n                    questionSource = 'custom';\n                }\n            } else {\n                console.log('Axios not available, falling back to custom questions');\n                questionSource = 'custom';\n            }\n        } catch (error) {\n            console.log('API failed, falling back to custom questions:', error.message);\n            questionSource = 'custom';\n        }\n    }\n\n    if (questionSource === 'custom' || !questionData) {\n        console.log('Using custom questions');\n        const questions = mod.userConfig.questions || [\n            { question: \"What is the largest country in the world?\", answer: \"Russia\" },\n            { question: \"What is the capital of France?\", answer: \"Paris\" },\n            { question: \"What is 2 + 2?\", answer: \"4\" }\n        ];\n\n        const randomQuestion = questions[Math.floor(Math.random() * questions.length)];\n        questionData = {\n            question: randomQuestion.question,\n            answer: randomQuestion.answer,\n            type: 'multiple',\n            incorrectAnswers: []\n        };\n    }\n\n    if (!questionData) {\n        console.log('No question data available');\n        return;\n    }\n\n    // Store question data\n    await takaro.variable.variableControllerCreate({\n        key: 'trivia_question',\n        value: questionData.question,\n        gameServerId,\n        moduleId: mod.moduleId\n    });\n\n    await takaro.variable.variableControllerCreate({\n        key: 'trivia_answer',\n        value: questionData.answer,\n        gameServerId,\n        moduleId: mod.moduleId\n    });\n\n    await takaro.variable.variableControllerCreate({\n        key: 'trivia_type',\n        value: questionData.type,\n        gameServerId,\n        moduleId: mod.moduleId\n    });\n\n    if (questionData.incorrectAnswers.length > 0) {\n        await takaro.variable.variableControllerCreate({\n            key: 'trivia_incorrect_answers',\n            value: JSON.stringify(questionData.incorrectAnswers),\n            gameServerId,\n            moduleId: mod.moduleId\n        });\n    }\n\n    // Setup reward - Updated to handle \"both\" option\n    const rewardType = mod.userConfig.rewardType || 'currency';\n    let selectedRewardType = rewardType;\n\n    // If \"both\" is selected, randomly choose between currency and items\n    if (rewardType === 'both') {\n        selectedRewardType = Math.random() < 0.5 ? 'currency' : 'items';\n    }\n\n    if (selectedRewardType === 'items') {\n        const configuredItems = mod.userConfig.rewardItems || [];\n        if (configuredItems.length > 0) {\n            const randomItemIndex = Math.floor(Math.random() * configuredItems.length);\n            const selectedItem = configuredItems[randomItemIndex];\n\n            await takaro.variable.variableControllerCreate({\n                key: 'trivia_reward',\n                value: JSON.stringify({\n                    type: 'items',\n                    itemId: selectedItem.item,\n                    amount: selectedItem.amount || 1,\n                    quality: selectedItem.quality || ''\n                }),\n                gameServerId,\n                moduleId: mod.moduleId\n            });\n        } else {\n            console.error('Items reward type selected but no items configured, falling back to currency');\n            await takaro.variable.variableControllerCreate({\n                key: 'trivia_reward',\n                value: JSON.stringify({\n                    type: 'currency',\n                    amount: mod.userConfig.rewardAmount || 100\n                }),\n                gameServerId,\n                moduleId: mod.moduleId\n            });\n        }\n    } else {\n        // Currency reward\n        await takaro.variable.variableControllerCreate({\n            key: 'trivia_reward',\n            value: JSON.stringify({\n                type: 'currency',\n                amount: mod.userConfig.rewardAmount || 100\n            }),\n            gameServerId,\n            moduleId: mod.moduleId\n        });\n    }\n    const prefix = (await takaro.settings.settingsControllerGetOne('commandPrefix', gameServerId)).data.data.value;\n\n    // Create appropriate message based on question type\n    let message = `🧠 Trivia Time! ${questionData.question}`;\n\n    if (questionData.type === 'boolean') {\n        message += ` (Answer with ${prefix}answer true or ${prefix}answer false)`;\n    } else if (questionData.incorrectAnswers.length > 0) {\n        const allAnswers = [questionData.answer, ...questionData.incorrectAnswers]\n            .sort(() => Math.random() - 0.5);\n\n        message += `\\nOptions: ${allAnswers.join(', ')} (Answer with ${prefix}answer <your choice>)`;\n    } else {\n        message += ` (Answer with ${prefix}answer <your guess>)`;\n    }\n\n    await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n        message: message\n    });\n\n    console.log('Trivia question posted successfully');\n}\n\nfunction decodeHtmlEntities(text) {\n    if (!text) return text;\n\n    const entityMap = {\n        '&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '\"', '&#039;': \"'\", '&apos;': \"'\",\n        '&nbsp;': ' ', '&eacute;': 'é', '&egrave;': 'è', '&ecirc;': 'ê', '&euml;': 'ë',\n        '&aacute;': 'á', '&agrave;': 'à', '&acirc;': 'â', '&auml;': 'ä',\n        '&iacute;': 'í', '&igrave;': 'ì', '&icirc;': 'î', '&iuml;': 'ï',\n        '&oacute;': 'ó', '&ograve;': 'ò', '&ocirc;': 'ô', '&ouml;': 'ö',\n        '&uacute;': 'ú', '&ugrave;': 'ù', '&ucirc;': 'û', '&uuml;': 'ü',\n        '&ntilde;': 'ñ', '&ccedil;': 'ç'\n    };\n\n    let decoded = text;\n    for (const [entity, char] of Object.entries(entityMap)) {\n        decoded = decoded.replace(new RegExp(entity, 'g'), char);\n    }\n\n    decoded = decoded.replace(/&#(\\d+);/g, (match, num) => {\n        return String.fromCharCode(parseInt(num, 10));\n    });\n\n    return decoded;\n}\n\nawait main();",
                    "name": "TriviaTime",
                    "description": null,
                    "temporalValue": "0 0 * * *"
                }
            ],
            "functions": [],
            "permissions": [
                {
                    "canHaveCount": false,
                    "description": "Allows players to participate in trivia games",
                    "permission": "TRIVIA_PARTICIPATE",
                    "friendlyName": "Participate in Trivia"
                },
                {
                    "canHaveCount": false,
                    "description": "Allows resetting the trivia leaderboard scores",
                    "permission": "TRIVIA_RESET_LEADERBOARD",
                    "friendlyName": "Reset Trivia Leaderboard"
                }
            ]
        },
        {
            "tag": "0.0.3",
            "description": "# Limon_triviaTime: Interactive Trivia Game System\n\nThe **Limon_triviaTime** module transforms your gaming server with an engaging trivia game system that automatically poses questions and rewards correct answers. This enhanced version supports both the Open Trivia Database API and custom questions.\n\n## Key Benefits:\n- **Dual Question Sources**: Choose between Open Trivia Database API or custom questions\n- **Rich Category Selection**: Access to 20+ categories from the API including General Knowledge, Science, Sports, History, and more\n- **Difficulty Control**: Easy, Medium, and Hard difficulty levels\n- **Flexible Question Types**: Support for True/False and Multiple Choice questions\n- **Flexible Reward System**: Choose between currency or item rewards for winners\n- **Automated Scheduling**: Set trivia events to run at specified intervals\n- **Player Engagement Tool**: Keeps your community active and entertained\n- **Simple Answer Validation**: Easy command-based answer submission system\n\n## Features:\n* Open Trivia Database API integration with 4000+ verified questions\n* Configurable question database with pre-populated examples as fallback\n* Dual reward types (currency or items)\n* Customizable item quality and quantity settings\n* Permission-based participation control\n* Automated trivia scheduling with cron jobs\n* Real-time feedback on incorrect answers\n* Server-wide announcements for winners\n* HTML entity decoding for proper question display\n* Session token support to prevent duplicate questions\n\nIdeal for server administrators looking to increase player retention and build community through interactive gameplay elements. Works seamlessly with existing Takaro economy and item systems.",
            "configSchema": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"type\":\"object\",\"properties\":{\"questionSource\":{\"title\":\"Question Source\",\"description\":\"Choose between Open Trivia Database API or custom questions\",\"type\":\"string\",\"enum\":[\"api\",\"custom\"],\"default\":\"api\"},\"apiCategory\":{\"title\":\"API Categories\",\"description\":\"Categories for Open Trivia Database questions (select multiple or 'any')\",\"type\":\"array\",\"items\":{\"type\":\"string\",\"enum\":[\"any\",\"general_knowledge\",\"books\",\"film\",\"music\",\"musicals_theatres\",\"television\",\"video_games\",\"board_games\",\"science_nature\",\"computers\",\"mathematics\",\"mythology\",\"sports\",\"geography\",\"history\",\"politics\",\"art\",\"celebrities\",\"animals\",\"vehicles\",\"comics\",\"gadgets\",\"anime_manga\",\"cartoon_animations\"]},\"uniqueItems\":true,\"default\":[\"any\"]},\"apiDifficulty\":{\"title\":\"API Difficulty\",\"description\":\"Difficulty level for Open Trivia Database questions\",\"type\":\"string\",\"enum\":[\"any\",\"easy\",\"medium\",\"hard\"],\"default\":\"any\"},\"apiType\":{\"title\":\"Question Type\",\"description\":\"Type of questions from API\",\"type\":\"string\",\"enum\":[\"any\",\"multiple\",\"boolean\"],\"default\":\"any\"},\"rewardType\":{\"title\":\"Reward Type\",\"description\":\"Choose Currency, Items, or Both (random)\",\"default\":\"currency\",\"type\":\"string\",\"enum\":[\"currency\",\"items\",\"both\"]},\"rewardAmount\":{\"title\":\"Reward Amount\",\"description\":\"Currency reward amount\",\"default\":100,\"type\":\"number\",\"minimum\":1,\"maximum\":100000},\"rewardItems\":{\"title\":\"Items\",\"description\":\"Items to give as rewards\",\"x-component\":\"item\",\"type\":\"array\",\"uniqueItems\":true,\"items\":{\"type\":\"object\",\"title\":\"Item\",\"properties\":{\"item\":{\"type\":\"string\",\"title\":\"Item\"},\"amount\":{\"type\":\"number\",\"title\":\"Amount\"},\"quality\":{\"type\":\"string\",\"title\":\"Quality\"}}}},\"questions\":{\"type\":\"array\",\"title\":\"Custom Questions (Fallback)\",\"description\":\"Used when API is unavailable or question source is set to custom\",\"items\":{\"type\":\"object\",\"properties\":{\"question\":{\"type\":\"string\",\"description\":\"The question\",\"minLength\":1},\"answer\":{\"type\":\"string\",\"description\":\"The answer\"}}},\"default\":[{\"question\":\"What is the capital of France?\",\"answer\":\"Paris\"},{\"question\":\"What is the largest planet in our solar system?\",\"answer\":\"Jupiter\"}]}},\"additionalProperties\":false}",
            "uiSchema": "{\"rewardItems\":{\"items\":{\"item\":{\"ui:widget\":\"item\"}}}}",
            "commands": [
                {
                    "function": "import { takaro, data, TakaroUserError } from '@takaro/helpers';\n\nasync function main() {\n    const { player, arguments: args, gameServerId, module: mod } = data;\n\n    if (!args.answer || args.answer.trim() === '') {\n        throw new TakaroUserError('Please provide an answer!');\n    }\n\n    // Check if there's an active trivia question\n    const questionVariable = await takaro.variable.variableControllerSearch({\n        filters: {\n            key: ['trivia_question'],\n            gameServerId: [gameServerId],\n            moduleId: [mod.moduleId]\n        }\n    });\n\n    if (questionVariable.data.data.length === 0) {\n        throw new TakaroUserError('No active trivia question! Wait for the next one.');\n    }\n\n    // Get the correct answer\n    const answerVariable = await takaro.variable.variableControllerSearch({\n        filters: {\n            key: ['trivia_answer'],\n            gameServerId: [gameServerId],\n            moduleId: [mod.moduleId]\n        }\n    });\n\n    if (answerVariable.data.data.length === 0) {\n        throw new TakaroUserError('No answer found for the current question.');\n    }\n\n    // Get reward info\n    const rewardVariable = await takaro.variable.variableControllerSearch({\n        filters: {\n            key: ['trivia_reward'],\n            gameServerId: [gameServerId],\n            moduleId: [mod.moduleId]\n        }\n    });\n\n    if (rewardVariable.data.data.length === 0) {\n        throw new TakaroUserError('No reward configured for this trivia.');\n    }\n\n    const correctAnswer = answerVariable.data.data[0].value;\n    const playerAnswer = args.answer.trim();\n\n    // Normalize answers for comparison (lowercase, remove extra spaces)\n    const normalizeAnswer = (answer) => {\n        return answer.toLowerCase().replace(/\\s+/g, ' ').trim();\n    };\n\n    const normalizedCorrectAnswer = normalizeAnswer(correctAnswer);\n    const normalizedPlayerAnswer = normalizeAnswer(playerAnswer);\n\n    console.log(`Player ${player.name} answered: \"${playerAnswer}\" (normalized: \"${normalizedPlayerAnswer}\")`);\n    console.log(`Correct answer: \"${correctAnswer}\" (normalized: \"${normalizedCorrectAnswer}\")`);\n\n    // Check if the answer is correct\n    if (normalizedPlayerAnswer === normalizedCorrectAnswer) {\n        // Give reward\n        const rewardData = JSON.parse(rewardVariable.data.data[0].value);\n\n        let rewardMessage = '';\n\n        if (rewardData.type === 'currency') {\n            await takaro.playerOnGameserver.playerOnGameServerControllerAddCurrency(gameServerId, player.id, {\n                currency: rewardData.amount\n            });\n\n            const currencyName = (await takaro.settings.settingsControllerGetOne('currencyName', gameServerId)).data.data.value;\n            rewardMessage = `You won ${rewardData.amount} ${currencyName}!`;\n\n        } else if (rewardData.type === 'items') {\n            const item = (await takaro.item.itemControllerFindOne(rewardData.itemId)).data.data;\n\n            await takaro.gameserver.gameServerControllerGiveItem(gameServerId, player.id, {\n                name: item.code,\n                amount: rewardData.amount,\n                quality: rewardData.quality || ''\n            });\n\n            rewardMessage = `You won ${rewardData.amount}x ${item.name}!`;\n        }\n\n        // 🆕 WIN TRACKING - Record the player's win\n        const winKey = `trivia_wins_${player.id}`;\n        const existingWins = await takaro.variable.variableControllerSearch({\n            filters: {\n                key: [winKey],\n                gameServerId: [gameServerId],\n                moduleId: [mod.moduleId]\n            }\n        });\n\n        let totalWins = 1;\n        if (existingWins.data.data.length > 0) {\n            totalWins = parseInt(existingWins.data.data[0].value) + 1;\n            await takaro.variable.variableControllerUpdate(existingWins.data.data[0].id, {\n                value: totalWins.toString()\n            });\n        } else {\n            await takaro.variable.variableControllerCreate({\n                key: winKey,\n                value: '1',\n                gameServerId,\n                moduleId: mod.moduleId,\n                playerId: player.id\n            });\n        }\n\n        // Success message with total wins\n        await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n            message: `🎉 ${player.name} got it right! The answer was: ${correctAnswer}. ${rewardMessage} (Total wins: ${totalWins})`\n        });\n\n        // Clean up trivia variables\n        const variablesToClean = await takaro.variable.variableControllerSearch({\n            filters: {\n                key: ['trivia_question', 'trivia_answer', 'trivia_reward', 'trivia_type', 'trivia_incorrect_answers'],\n                gameServerId: [gameServerId],\n                moduleId: [mod.moduleId]\n            }\n        });\n\n        await Promise.all(variablesToClean.data.data.map(variable =>\n            takaro.variable.variableControllerDelete(variable.id)\n        ));\n\n        console.log(`${player.name} answered correctly and won! Total wins: ${totalWins}`);\n\n    } else {\n        // Wrong answer\n        await player.pm(`❌ Sorry, \"${playerAnswer}\" is not correct. Try again!`);\n        console.log(`${player.name} answered incorrectly.`);\n    }\n}\n\nawait main();",
                    "name": "playerAnswer",
                    "description": null,
                    "trigger": "answer",
                    "helpText": "Submit your answer to the current trivia question",
                    "arguments": [
                        {
                            "name": "answer",
                            "type": "string",
                            "defaultValue": "",
                            "helpText": "provide an answer",
                            "position": 0
                        }
                    ]
                },
                {
                    "function": "import { takaro, data } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, module: mod, player } = data;\n\n    // Get all trivia wins for this server\n    const allWins = await takaro.variable.variableControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            moduleId: [mod.moduleId]\n        },\n        search: {\n            key: ['trivia_wins_']\n        },\n        limit: 1000\n    });\n\n    if (allWins.data.data.length === 0) {\n        await player.pm('🏆 No trivia winners yet! Be the first to answer a question correctly!');\n        return;\n    }\n\n    // Sort by wins (stored as string, so convert to number)\n    const sortedWins = allWins.data.data\n        .map(record => ({\n            playerId: record.playerId,\n            wins: parseInt(record.value) || 0\n        }))\n        .sort((a, b) => b.wins - a.wins)\n        .slice(0, mod.userConfig.leaderboardSize || 10);\n\n    // Get player names\n    const leaderboard = await Promise.all(\n        sortedWins.map(async (record, index) => {\n            const playerData = await takaro.player.playerControllerGetOne(record.playerId);\n            return {\n                position: index + 1,\n                name: playerData.data.data.name,\n                wins: record.wins\n            };\n        })\n    );\n\n    // Build leaderboard message\n    let message = '🏆 **Trivia Leaderboard** 🧠\\n\\n';\n\n    leaderboard.forEach(entry => {\n        const medal = entry.position === 1 ? '🥇' : entry.position === 2 ? '🥈' : entry.position === 3 ? '🥉' : '  ';\n        message += `${medal} ${entry.position}. ${entry.name} - ${entry.wins} win${entry.wins !== 1 ? 's' : ''}\\n`;\n    });\n\n    // Add current player's ranking if not in top list\n    const currentPlayerWins = sortedWins.find(record => record.playerId === player.id);\n    if (!currentPlayerWins && allWins.data.data.some(record => record.playerId === player.id)) {\n        const playerRecord = allWins.data.data.find(record => record.playerId === player.id);\n        const playerWins = parseInt(playerRecord.value) || 0;\n        const playerRank = allWins.data.data\n            .map(record => parseInt(record.value) || 0)\n            .sort((a, b) => b - a)\n            .findIndex(wins => wins <= playerWins) + 1;\n\n        message += `\\n📍 Your rank: #${playerRank} with ${playerWins} win${playerWins !== 1 ? 's' : ''}`;\n    }\n\n    await player.pm(message);\n}\n\nawait main();",
                    "name": "triviaboard",
                    "description": null,
                    "trigger": "triviaboard",
                    "helpText": "No help text available",
                    "arguments": []
                },
                {
                    "function": "import { takaro, data, checkPermission, TakaroUserError } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, module: mod, pog, player } = data;\n\n    // Check permission\n    if (!checkPermission(pog, 'TRIVIA_RESET_LEADERBOARD')) {\n        throw new TakaroUserError('You do not have permission to reset the trivia leaderboard.');\n    }\n\n    // Get all trivia-related variables for this server\n    const triviaVariables = await takaro.variable.variableControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            moduleId: [mod.moduleId]\n        },\n        search: {\n            key: ['trivia_wins_', 'trivia_question', 'trivia_answer', 'trivia_reward', 'trivia_type', 'trivia_incorrect_answers']\n        },\n        limit: 1000\n    });\n\n    if (triviaVariables.data.data.length === 0) {\n        await player.pm('🗑️ No trivia data found to reset.');\n        return;\n    }\n\n    // Delete all trivia variables\n    const deletePromises = triviaVariables.data.data.map(variable =>\n        takaro.variable.variableControllerDelete(variable.id)\n    );\n\n    await Promise.allSettled(deletePromises);\n\n    // Send confirmation\n    const winsCount = triviaVariables.data.data.filter(v => v.key.startsWith('trivia_wins_')).length;\n\n    await player.pm(`🗑️ Trivia leaderboard reset successfully! Cleared ${winsCount} player records.`);\n\n    // Announce to server\n    await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n        message: `🔄 Trivia leaderboard has been reset by an administrator!`\n    });\n\n    console.log(`Trivia leaderboard reset by player ${player.name} (${player.id})`);\n}\n\nawait main();",
                    "name": "triviareset",
                    "description": null,
                    "trigger": "triviareset",
                    "helpText": "No help text available",
                    "arguments": []
                }
            ],
            "hooks": [],
            "cronJobs": [
                {
                    "function": "import { takaro, data } from '@takaro/helpers';\n\nasync function main() {\n    const { gameServerId, module: mod } = data;\n\n    // Check for online players\n    const currentPlayersRes = await takaro.playerOnGameserver.playerOnGameServerControllerSearch({\n        filters: {\n            gameServerId: [gameServerId],\n            online: [true]\n        }\n    });\n\n    if (currentPlayersRes.data.data.length === 0) {\n        console.log('No online players, skipping trivia');\n        return;\n    }\n\n    console.log(`Found ${currentPlayersRes.data.data.length} online players`);\n\n    // Clear existing variables first\n    const existingVariables = await takaro.variable.variableControllerSearch({\n        filters: {\n            key: ['trivia_question', 'trivia_answer', 'trivia_reward', 'trivia_type', 'trivia_incorrect_answers'],\n            gameServerId: [gameServerId],\n            moduleId: [mod.moduleId]\n        }\n    });\n\n    await Promise.all(existingVariables.data.data.map(variable =>\n        takaro.variable.variableControllerDelete(variable.id)\n    ));\n\n    let questionData = null;\n    let questionSource = mod.userConfig.questionSource || 'api';\n\n    if (questionSource === 'api') {\n        console.log('Attempting to fetch from Open Trivia Database API using Axios');\n\n        try {\n            // Check if axios is available\n            if (takaro.axios) {\n                console.log('Axios is available! Making API request...');\n\n                // Build API URL\n                let url = 'https://opentdb.com/api.php?amount=1';\n\n                // Add categories if specified\n                const categories = mod.userConfig.apiCategory || ['any'];\n                if (categories.length > 0 && !categories.includes('any')) {\n                    const categoryMap = {\n                        'general_knowledge': 9, 'books': 10, 'film': 11, 'music': 12,\n                        'musicals_theatres': 13, 'television': 14, 'video_games': 15,\n                        'board_games': 16, 'science_nature': 17, 'computers': 18,\n                        'mathematics': 19, 'mythology': 20, 'sports': 21, 'geography': 22,\n                        'history': 23, 'politics': 24, 'art': 25, 'celebrities': 26,\n                        'animals': 27, 'vehicles': 28, 'comics': 29, 'gadgets': 30,\n                        'anime_manga': 31, 'cartoon_animations': 32\n                    };\n\n                    const randomCategory = categories[Math.floor(Math.random() * categories.length)];\n                    const categoryId = categoryMap[randomCategory];\n                    if (categoryId) {\n                        url += `&category=${categoryId}`;\n                    }\n                }\n\n                // Add difficulty if specified\n                if (mod.userConfig.apiDifficulty && mod.userConfig.apiDifficulty !== 'any') {\n                    url += `&difficulty=${mod.userConfig.apiDifficulty}`;\n                }\n\n                // Add type if specified\n                if (mod.userConfig.apiType && mod.userConfig.apiType !== 'any') {\n                    url += `&type=${mod.userConfig.apiType}`;\n                }\n\n                console.log('Fetching trivia question from:', url);\n\n                // Make the API request using Axios\n                const response = await takaro.axios.get(url);\n                const apiData = response.data;\n\n                console.log('API Response:', JSON.stringify(apiData));\n\n                if (apiData.response_code === 0 && apiData.results && apiData.results.length > 0) {\n                    const question = apiData.results[0];\n\n                    questionData = {\n                        question: decodeHtmlEntities(question.question),\n                        answer: decodeHtmlEntities(question.correct_answer),\n                        type: question.type,\n                        incorrectAnswers: question.incorrect_answers ? question.incorrect_answers.map(decodeHtmlEntities) : []\n                    };\n                    console.log('Successfully fetched API question:', questionData.question);\n                } else {\n                    console.log('API returned error or no results:', apiData);\n                    questionSource = 'custom';\n                }\n            } else {\n                console.log('Axios not available, falling back to custom questions');\n                questionSource = 'custom';\n            }\n        } catch (error) {\n            console.log('API failed, falling back to custom questions:', error.message);\n            questionSource = 'custom';\n        }\n    }\n\n    if (questionSource === 'custom' || !questionData) {\n        console.log('Using custom questions');\n        const questions = mod.userConfig.questions || [\n            { question: \"What is the largest country in the world?\", answer: \"Russia\" },\n            { question: \"What is the capital of France?\", answer: \"Paris\" },\n            { question: \"What is 2 + 2?\", answer: \"4\" }\n        ];\n\n        const randomQuestion = questions[Math.floor(Math.random() * questions.length)];\n        questionData = {\n            question: randomQuestion.question,\n            answer: randomQuestion.answer,\n            type: 'multiple',\n            incorrectAnswers: []\n        };\n    }\n\n    if (!questionData) {\n        console.log('No question data available');\n        return;\n    }\n\n    // Store question data\n    await takaro.variable.variableControllerCreate({\n        key: 'trivia_question',\n        value: questionData.question,\n        gameServerId,\n        moduleId: mod.moduleId\n    });\n\n    await takaro.variable.variableControllerCreate({\n        key: 'trivia_answer',\n        value: questionData.answer,\n        gameServerId,\n        moduleId: mod.moduleId\n    });\n\n    await takaro.variable.variableControllerCreate({\n        key: 'trivia_type',\n        value: questionData.type,\n        gameServerId,\n        moduleId: mod.moduleId\n    });\n\n    if (questionData.incorrectAnswers.length > 0) {\n        await takaro.variable.variableControllerCreate({\n            key: 'trivia_incorrect_answers',\n            value: JSON.stringify(questionData.incorrectAnswers),\n            gameServerId,\n            moduleId: mod.moduleId\n        });\n    }\n\n    // Setup reward - Updated to handle \"both\" option\n    const rewardType = mod.userConfig.rewardType || 'currency';\n    let selectedRewardType = rewardType;\n\n    // If \"both\" is selected, randomly choose between currency and items\n    if (rewardType === 'both') {\n        selectedRewardType = Math.random() < 0.5 ? 'currency' : 'items';\n    }\n\n    if (selectedRewardType === 'items') {\n        const configuredItems = mod.userConfig.rewardItems || [];\n        if (configuredItems.length > 0) {\n            const randomItemIndex = Math.floor(Math.random() * configuredItems.length);\n            const selectedItem = configuredItems[randomItemIndex];\n\n            await takaro.variable.variableControllerCreate({\n                key: 'trivia_reward',\n                value: JSON.stringify({\n                    type: 'items',\n                    itemId: selectedItem.item,\n                    amount: selectedItem.amount || 1,\n                    quality: selectedItem.quality || ''\n                }),\n                gameServerId,\n                moduleId: mod.moduleId\n            });\n        } else {\n            console.error('Items reward type selected but no items configured, falling back to currency');\n            await takaro.variable.variableControllerCreate({\n                key: 'trivia_reward',\n                value: JSON.stringify({\n                    type: 'currency',\n                    amount: mod.userConfig.rewardAmount || 100\n                }),\n                gameServerId,\n                moduleId: mod.moduleId\n            });\n        }\n    } else {\n        // Currency reward\n        await takaro.variable.variableControllerCreate({\n            key: 'trivia_reward',\n            value: JSON.stringify({\n                type: 'currency',\n                amount: mod.userConfig.rewardAmount || 100\n            }),\n            gameServerId,\n            moduleId: mod.moduleId\n        });\n    }\n    const prefix = (await takaro.settings.settingsControllerGetOne('commandPrefix', gameServerId)).data.data.value;\n\n    // Create appropriate message based on question type\n    let message = `🧠 Trivia Time! ${questionData.question}`;\n\n    if (questionData.type === 'boolean') {\n        message += ` (Answer with ${prefix}answer true or ${prefix}answer false)`;\n    } else if (questionData.incorrectAnswers.length > 0) {\n        const allAnswers = [questionData.answer, ...questionData.incorrectAnswers]\n            .sort(() => Math.random() - 0.5);\n\n        message += `\\nOptions: ${allAnswers.join(', ')} (Answer with ${prefix}answer <your choice>)`;\n    } else {\n        message += ` (Answer with ${prefix}answer <your guess>)`;\n    }\n\n    await takaro.gameserver.gameServerControllerSendMessage(gameServerId, {\n        message: message\n    });\n\n    console.log('Trivia question posted successfully');\n}\n\nfunction decodeHtmlEntities(text) {\n    if (!text) return text;\n\n    const entityMap = {\n        '&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '\"', '&#039;': \"'\", '&apos;': \"'\",\n        '&nbsp;': ' ', '&eacute;': 'é', '&egrave;': 'è', '&ecirc;': 'ê', '&euml;': 'ë',\n        '&aacute;': 'á', '&agrave;': 'à', '&acirc;': 'â', '&auml;': 'ä',\n        '&iacute;': 'í', '&igrave;': 'ì', '&icirc;': 'î', '&iuml;': 'ï',\n        '&oacute;': 'ó', '&ograve;': 'ò', '&ocirc;': 'ô', '&ouml;': 'ö',\n        '&uacute;': 'ú', '&ugrave;': 'ù', '&ucirc;': 'û', '&uuml;': 'ü',\n        '&ntilde;': 'ñ', '&ccedil;': 'ç'\n    };\n\n    let decoded = text;\n    for (const [entity, char] of Object.entries(entityMap)) {\n        decoded = decoded.replace(new RegExp(entity, 'g'), char);\n    }\n\n    decoded = decoded.replace(/&#(\\d+);/g, (match, num) => {\n        return String.fromCharCode(parseInt(num, 10));\n    });\n\n    return decoded;\n}\n\nawait main();",
                    "name": "TriviaTime",
                    "description": null,
                    "temporalValue": "0 0 * * *"
                }
            ],
            "functions": [],
            "permissions": [
                {
                    "canHaveCount": false,
                    "description": "Allows players to participate in trivia games",
                    "permission": "TRIVIA_PARTICIPATE",
                    "friendlyName": "Participate in Trivia"
                },
                {
                    "canHaveCount": false,
                    "description": "Allows resetting the trivia leaderboard scores",
                    "permission": "TRIVIA_RESET_LEADERBOARD",
                    "friendlyName": "Reset Trivia Leaderboard"
                }
            ]
        }
    ],
    "takaroVersion": "v0.3.3"
}