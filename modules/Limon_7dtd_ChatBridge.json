{
    "name": "Limon_7dtd_ChatBridge",
    "versions": [
        {
            "tag": "latest",
  "description": "Enables two-way chat communication between your 7 Days to Die game server and a Discord channel, enhancing community interaction and providing server monitoring tools.\n\n  **Key Functionality:**\n\n  * **Two-Way Chat Relay:** Seamlessly forwards messages between the game server and the designated Discord channel, allowing players in-game and on Discord to communicate with each other.\n  * **Player Connection/Disconnection Notifications:** Automatically sends messages to Discord when players join or leave the server, keeping the community informed of server activity.\n  * **Chat Filtering:** Offers robust filtering options to control which messages are relayed to Discord:\n      * `Only Global Chat:` Relays only messages sent in the game's global chat, excluding private or team chat.\n      * `Filter Commands:` Prevents in-game commands (e.g., `/ban`, `/kick`) from being sent to Discord, keeping the chat clean.\n      * `Filter System Messages:` Excludes non-player system messages from being forwarded to Discord.\n  * **Monitoring Channel (Optional):** Allows for the setup of a separate Discord channel that receives *all* server messages, including chat, commands, and system logs. This is useful for server administration, moderation, and debugging.\n\n  **How to Use:**\n\n  1.  **Configuration:** The module is configured via its user settings. You'll need to provide the Discord channel IDs where the chat should be relayed. Optional settings allow you to customize the filtering and notifications.\n  2.  **Discord Setup:** Ensure your Discord bot has the necessary permissions to send and receive messages in the configured channels.\n  3.  **Installation:** Install the module on your Takaro instance, and configure it for your 7 Days to Die server.\n  4.  **Chatting:** Once set up, players can chat as usual in-game, and their messages will appear in the Discord channel (subject to filtering). Likewise, messages sent in the Discord channel will be relayed to the game server.\n\n  **Important Considerations:**\n\n  * This module relies on the correct configuration of Discord channel IDs within the module's settings.\n  * Filtering options should be configured according to your community's needs and moderation preferences.\n  * The monitoring channel is optional but highly recommended for server administration.\n",
            "configSchema": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"type\":\"object\",\"properties\":{\"sendPlayerConnected\":{\"title\":\"Send player connected\",\"type\":\"boolean\",\"description\":\"Send a message when a player connects.\",\"default\":true},\"sendPlayerDisconnected\":{\"title\":\"Send player disconnected\",\"type\":\"boolean\",\"description\":\"Send a message when a player disconnects.\",\"default\":true},\"onlyGlobalChat\":{\"title\":\"Only global chat\",\"type\":\"boolean\",\"default\":true,\"description\":\"Only relay messages from global chat (no team chat or private messages)\"},\"filterCommands\":{\"title\":\"Filter commands\",\"type\":\"boolean\",\"default\":false,\"description\":\"Don't relay command messages (/command) to Discord\"},\"filterSystemMessages\":{\"title\":\"Filter system messages\",\"type\":\"boolean\",\"default\":false,\"description\":\"Don't relay system messages to Discord\"},\"useMonitoring\":{\"title\":\"Enable monitoring channel\",\"type\":\"boolean\",\"default\":false,\"description\":\"Send commands and system messages to a separate monitoring channel\"},\"monitoringChannelId\":{\"title\":\"Monitoring channel ID\",\"type\":\"string\",\"description\":\"Discord channel ID for monitoring messages (only used if monitoring is enabled)\"}},\"additionalProperties\":false}",
            "uiSchema": "{}",
            "commands": [],
            "hooks": [
                {
                    "function": "import { takaro, data } from '@takaro/helpers';\n\nasync function main() {\n    const config = data.module.userConfig;\n\n    // Get message details\n    const sender = data.player ? data.player.name : 'Non-player';\n    const message = data.eventData.msg;\n    const channel = data.eventData.channel;\n    const isCommand = message.startsWith('/');\n\n    // Format message based on channel type\n    let formattedMessage;\n    if (channel === \"global\") {\n        formattedMessage = `**${sender}**: ${message}`;\n    } else if (channel === \"team\") {\n        formattedMessage = `[Party] **${sender}**: ${message}`;\n    } else {\n        formattedMessage = `[Friends] **${sender}**: ${message}`;\n    }\n\n    // Always send to monitoring channel if enabled\n    if (config.useMonitoring && config.monitoringChannelId) {\n        await takaro.discord.discordControllerSendMessage(config.monitoringChannelId, {\n            message: formattedMessage\n        });\n    }\n\n    // Apply filters for main channel\n    if (config.onlyGlobalChat && channel !== 'global') return;\n    if (isCommand && config.filterCommands) return;\n    if (sender === 'Non-player' && config.filterSystemMessages) return;\n\n    // Send to main channel after filters\n    const mainChannel = data.module.systemConfig.hooks['DiscordToGame'].discordChannelId;\n    await takaro.discord.discordControllerSendMessage(mainChannel, {\n        message: formattedMessage\n    });\n}\n\nawait main();",
                    "name": "GameToDiscord",
                    "description": null,
                    "eventType": "chat-message"
                },
                {
                    "function": "import { takaro, data } from '@takaro/helpers';\nasync function main() {\n    try {\n        if (data.eventData.author.isBot)\n            return;\n        await takaro.gameserver.gameServerControllerSendMessage(data.gameServerId, {\n            message: `[D] ${data.eventData.author.displayName}:  ${data.eventData.msg}`,\n        });\n    }\n    catch (error) {\n        console.error(error);\n        await takaro.discordControllerSendMessage(data.discordChannelId, {\n            message: 'Failed to forward your message to the game. Please try again later.',\n        });\n    }\n}\nawait main();\n//# sourceMappingURL=DiscordToGame.js.map",
                    "name": "DiscordToGame",
                    "description": null,
                    "eventType": "discord-message"
                },
                {
                    "function": "import { takaro, data } from '@takaro/helpers';\nasync function main() {\n    const discordChannel = data.module.systemConfig.hooks['DiscordToGame'].discordChannelId;\n    await takaro.discord.discordControllerSendMessage(discordChannel, {\n        message: `[ðŸ‘‹ Disconnected]: ${data.player.name}`,\n    });\n}\nawait main();\n//# sourceMappingURL=PlayerDisconnected.js.map",
                    "name": "PlayerDisconnected",
                    "description": null,
                    "eventType": "player-disconnected"
                },
                {
                    "function": "import { takaro, data } from '@takaro/helpers';\nasync function main() {\n    const discordChannel = data.module.systemConfig.hooks['DiscordToGame'].discordChannelId;\n    await takaro.discord.discordControllerSendMessage(discordChannel, {\n        message: `[âš¡ Connected]: ${data.player.name}`,\n    });\n}\nawait main();\n//# sourceMappingURL=PlayerConnected.js.map",
                    "name": "PlayerConnected",
                    "description": null,
                    "eventType": "player-connected"
                }
            ],
            "cronJobs": [],
            "functions": [],
            "permissions": []
        },
        {
            "tag": "1.0.0",
  "description": "Enables two-way chat communication between your 7 Days to Die game server and a Discord channel, enhancing community interaction and providing server monitoring tools.\n\n  **Key Functionality:**\n\n  * **Two-Way Chat Relay:** Seamlessly forwards messages between the game server and the designated Discord channel, allowing players in-game and on Discord to communicate with each other.\n  * **Player Connection/Disconnection Notifications:** Automatically sends messages to Discord when players join or leave the server, keeping the community informed of server activity.\n  * **Chat Filtering:** Offers robust filtering options to control which messages are relayed to Discord:\n      * `Only Global Chat:` Relays only messages sent in the game's global chat, excluding private or team chat.\n      * `Filter Commands:` Prevents in-game commands (e.g., `/ban`, `/kick`) from being sent to Discord, keeping the chat clean.\n      * `Filter System Messages:` Excludes non-player system messages from being forwarded to Discord.\n  * **Monitoring Channel (Optional):** Allows for the setup of a separate Discord channel that receives *all* server messages, including chat, commands, and system logs. This is useful for server administration, moderation, and debugging.\n\n  **How to Use:**\n\n  1.  **Configuration:** The module is configured via its user settings. You'll need to provide the Discord channel IDs where the chat should be relayed. Optional settings allow you to customize the filtering and notifications.\n  2.  **Discord Setup:** Ensure your Discord bot has the necessary permissions to send and receive messages in the configured channels.\n  3.  **Installation:** Install the module on your Takaro instance, and configure it for your 7 Days to Die server.\n  4.  **Chatting:** Once set up, players can chat as usual in-game, and their messages will appear in the Discord channel (subject to filtering). Likewise, messages sent in the Discord channel will be relayed to the game server.\n\n  **Important Considerations:**\n\n  * This module relies on the correct configuration of Discord channel IDs within the module's settings.\n  * Filtering options should be configured according to your community's needs and moderation preferences.\n  * The monitoring channel is optional but highly recommended for server administration.\n",
            "configSchema": "{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"type\":\"object\",\"properties\":{\"sendPlayerConnected\":{\"title\":\"Send player connected\",\"type\":\"boolean\",\"description\":\"Send a message when a player connects.\",\"default\":true},\"sendPlayerDisconnected\":{\"title\":\"Send player disconnected\",\"type\":\"boolean\",\"description\":\"Send a message when a player disconnects.\",\"default\":true},\"onlyGlobalChat\":{\"title\":\"Only global chat\",\"type\":\"boolean\",\"default\":true,\"description\":\"Only relay messages from global chat (no team chat or private messages)\"},\"filterCommands\":{\"title\":\"Filter commands\",\"type\":\"boolean\",\"default\":false,\"description\":\"Don't relay command messages (/command) to Discord\"},\"filterSystemMessages\":{\"title\":\"Filter system messages\",\"type\":\"boolean\",\"default\":false,\"description\":\"Don't relay system messages to Discord\"},\"useMonitoring\":{\"title\":\"Enable monitoring channel\",\"type\":\"boolean\",\"default\":false,\"description\":\"Send commands and system messages to a separate monitoring channel\"},\"monitoringChannelId\":{\"title\":\"Monitoring channel ID\",\"type\":\"string\",\"description\":\"Discord channel ID for monitoring messages (only used if monitoring is enabled)\"}},\"additionalProperties\":false}",
            "uiSchema": "{}",
            "commands": [],
            "hooks": [
                {
                    "function": "import { takaro, data } from '@takaro/helpers';\nasync function main() {\n    const discordChannel = data.module.systemConfig.hooks['DiscordToGame'].discordChannelId;\n    await takaro.discord.discordControllerSendMessage(discordChannel, {\n        message: `[ðŸ‘‹ Disconnected]: ${data.player.name}`,\n    });\n}\nawait main();\n//# sourceMappingURL=PlayerDisconnected.js.map",
                    "name": "PlayerDisconnected",
                    "description": null,
                    "eventType": "player-disconnected"
                },
                {
                    "function": "import { takaro, data } from '@takaro/helpers';\n\nasync function main() {\n    const config = data.module.userConfig;\n\n    // Get message details\n    const sender = data.player ? data.player.name : 'Non-player';\n    const message = data.eventData.msg;\n    const channel = data.eventData.channel;\n    const isCommand = message.startsWith('/');\n\n    // Format message based on channel type\n    let formattedMessage;\n    if (channel === \"global\") {\n        formattedMessage = `**${sender}**: ${message}`;\n    } else if (channel === \"team\") {\n        formattedMessage = `[Party] **${sender}**: ${message}`;\n    } else {\n        formattedMessage = `[Friends] **${sender}**: ${message}`;\n    }\n\n    // Always send to monitoring channel if enabled\n    if (config.useMonitoring && config.monitoringChannelId) {\n        await takaro.discord.discordControllerSendMessage(config.monitoringChannelId, {\n            message: formattedMessage\n        });\n    }\n\n    // Apply filters for main channel\n    if (config.onlyGlobalChat && channel !== 'global') return;\n    if (isCommand && config.filterCommands) return;\n    if (sender === 'Non-player' && config.filterSystemMessages) return;\n\n    // Send to main channel after filters\n    const mainChannel = data.module.systemConfig.hooks['DiscordToGame'].discordChannelId;\n    await takaro.discord.discordControllerSendMessage(mainChannel, {\n        message: formattedMessage\n    });\n}\n\nawait main();",
                    "name": "GameToDiscord",
                    "description": null,
                    "eventType": "chat-message"
                },
                {
                    "function": "import { takaro, data } from '@takaro/helpers';\nasync function main() {\n    try {\n        if (data.eventData.author.isBot)\n            return;\n        await takaro.gameserver.gameServerControllerSendMessage(data.gameServerId, {\n            message: `[D] ${data.eventData.author.displayName}:  ${data.eventData.msg}`,\n        });\n    }\n    catch (error) {\n        console.error(error);\n        await takaro.discordControllerSendMessage(data.discordChannelId, {\n            message: 'Failed to forward your message to the game. Please try again later.',\n        });\n    }\n}\nawait main();\n//# sourceMappingURL=DiscordToGame.js.map",
                    "name": "DiscordToGame",
                    "description": null,
                    "eventType": "discord-message"
                },
                {
                    "function": "import { takaro, data } from '@takaro/helpers';\nasync function main() {\n    const discordChannel = data.module.systemConfig.hooks['DiscordToGame'].discordChannelId;\n    await takaro.discord.discordControllerSendMessage(discordChannel, {\n        message: `[âš¡ Connected]: ${data.player.name}`,\n    });\n}\nawait main();\n//# sourceMappingURL=PlayerConnected.js.map",
                    "name": "PlayerConnected",
                    "description": null,
                    "eventType": "player-connected"
                }
            ],
            "cronJobs": [],
            "functions": [],
            "permissions": []
        }
    ],
    "takaroVersion": "v0.0.21"
}